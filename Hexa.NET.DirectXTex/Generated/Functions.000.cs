// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

#if !STANDALONE
using Silk.NET.DXGI;
using Silk.NET.Direct2D;
using Silk.NET.Direct3D11;
using Silk.NET.Direct3D12;
#endif

namespace Hexa.NET.DirectXTex
{
	public unsafe partial class DirectXTex
	{
		internal const string LibName = "DirectXTex";

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsValid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsValidNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)vt[0])(fmt);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)vt[0])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsValid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsValid([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			byte ret = IsValidNative(fmt);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsCompressed")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsCompressedNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)vt[1])(fmt);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)vt[1])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsCompressed")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsCompressed([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			byte ret = IsCompressedNative(fmt);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsPacked")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsPackedNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)vt[2])(fmt);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)vt[2])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsPacked")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPacked([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			byte ret = IsPackedNative(fmt);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsVideo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsVideoNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)vt[3])(fmt);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)vt[3])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsVideo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsVideo([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			byte ret = IsVideoNative(fmt);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsPlanar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsPlanarNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)vt[4])(fmt);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)vt[4])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsPlanar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPlanar([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			byte ret = IsPlanarNative(fmt);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsPalettized")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsPalettizedNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)vt[5])(fmt);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)vt[5])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsPalettized")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPalettized([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			byte ret = IsPalettizedNative(fmt);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsDepthStencil")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsDepthStencilNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)vt[6])(fmt);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)vt[6])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsDepthStencil")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsDepthStencil([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			byte ret = IsDepthStencilNative(fmt);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsSRGB")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsSRGBNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)vt[7])(fmt);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)vt[7])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsSRGB")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsSRGB([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			byte ret = IsSRGBNative(fmt);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsTypeless")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsTypelessNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "partialTypeless")] [NativeName(NativeNameType.Type, "bool")] byte partialTypeless)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte, byte>)vt[8])(fmt, partialTypeless);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte, byte>)vt[8])(fmt, partialTypeless);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsTypeless")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsTypeless([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "partialTypeless")] [NativeName(NativeNameType.Type, "bool")] bool partialTypeless)
		{
			byte ret = IsTypelessNative(fmt, partialTypeless ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "HasAlpha")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte HasAlphaNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)vt[9])(fmt);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)vt[9])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "HasAlpha")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool HasAlpha([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			byte ret = HasAlphaNative(fmt);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BitsPerPixel")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		internal static ulong BitsPerPixelNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ulong>)vt[10])(fmt);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<int, ulong>)vt[10])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "BitsPerPixel")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong BitsPerPixel([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			ulong ret = BitsPerPixelNative(fmt);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BitsPerColor")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		internal static ulong BitsPerColorNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ulong>)vt[11])(fmt);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<int, ulong>)vt[11])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "BitsPerColor")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong BitsPerColor([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			ulong ret = BitsPerColorNative(fmt);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "FormatDataType")]
		[return: NativeName(NativeNameType.Type, "FORMAT_TYPE")]
		internal static FormatType FormatDataTypeNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, FormatType>)vt[12])(fmt);
			#else
			return (FormatType)((delegate* unmanaged[Cdecl]<int, FormatType>)vt[12])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "FormatDataType")]
		[return: NativeName(NativeNameType.Type, "FORMAT_TYPE")]
		public static FormatType FormatDataType([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			FormatType ret = FormatDataTypeNative(fmt);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult ComputePitchNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong*, ulong*, CPFlags, HResult>)vt[13])(fmt, width, height, rowPitch, slicePitch, flags);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<int, ulong, ulong, nint, nint, CPFlags, HResult>)vt[13])(fmt, width, height, (nint)rowPitch, (nint)slicePitch, flags);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = ComputePitchNative(fmt, width, height, rowPitch, slicePitch, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = ComputePitchNative(fmt, width, height, rowPitch, slicePitch, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = ComputePitchNative(fmt, width, height, rowPitch, slicePitch, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = ComputePitchNative(fmt, width, height, rowPitch, slicePitch, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (nuint* prowPitch = &rowPitch)
			{
				HResult ret = ComputePitchNative(fmt, width, height, (ulong*)prowPitch, slicePitch, flags);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (nuint* prowPitch = &rowPitch)
			{
				HResult ret = ComputePitchNative(fmt, width, height, (ulong*)prowPitch, slicePitch, flags);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (nuint* prowPitch = &rowPitch)
			{
				HResult ret = ComputePitchNative(fmt, width, height, (ulong*)prowPitch, slicePitch, flags);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (nuint* prowPitch = &rowPitch)
			{
				HResult ret = ComputePitchNative(fmt, width, height, (ulong*)prowPitch, slicePitch, flags);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (nuint* pslicePitch = &slicePitch)
			{
				HResult ret = ComputePitchNative(fmt, width, height, rowPitch, (ulong*)pslicePitch, flags);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (nuint* pslicePitch = &slicePitch)
			{
				HResult ret = ComputePitchNative(fmt, width, height, rowPitch, (ulong*)pslicePitch, flags);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (nuint* pslicePitch = &slicePitch)
			{
				HResult ret = ComputePitchNative(fmt, width, height, rowPitch, (ulong*)pslicePitch, flags);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ulong* rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (nuint* pslicePitch = &slicePitch)
			{
				HResult ret = ComputePitchNative(fmt, width, height, rowPitch, (ulong*)pslicePitch, flags);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (nuint* prowPitch = &rowPitch)
			{
				fixed (nuint* pslicePitch = &slicePitch)
				{
					HResult ret = ComputePitchNative(fmt, width, height, (ulong*)prowPitch, (ulong*)pslicePitch, flags);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (nuint* prowPitch = &rowPitch)
			{
				fixed (nuint* pslicePitch = &slicePitch)
				{
					HResult ret = ComputePitchNative(fmt, width, height, (ulong*)prowPitch, (ulong*)pslicePitch, flags);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (nuint* prowPitch = &rowPitch)
			{
				fixed (nuint* pslicePitch = &slicePitch)
				{
					HResult ret = ComputePitchNative(fmt, width, height, (ulong*)prowPitch, (ulong*)pslicePitch, flags);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputePitch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult ComputePitch([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "rowPitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint rowPitch, [NativeName(NativeNameType.Param, "slicePitch")] [NativeName(NativeNameType.Type, "size_t&")] ref nuint slicePitch, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (nuint* prowPitch = &rowPitch)
			{
				fixed (nuint* pslicePitch = &slicePitch)
				{
					HResult ret = ComputePitchNative(fmt, width, height, (ulong*)prowPitch, (ulong*)pslicePitch, flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ComputeScanlines")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		internal static ulong ComputeScanlinesNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ulong, ulong>)vt[14])(fmt, height);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<int, ulong, ulong>)vt[14])(fmt, height);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeScanlines")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeScanlines([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height)
		{
			ulong ret = ComputeScanlinesNative(fmt, height);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeScanlines")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeScanlines([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height)
		{
			ulong ret = ComputeScanlinesNative(fmt, height);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "MakeSRGB")]
		[return: NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		internal static int MakeSRGBNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[15])(fmt);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)vt[15])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "MakeSRGB")]
		[return: NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public static int MakeSRGB([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			int ret = MakeSRGBNative(fmt);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "MakeTypeless")]
		[return: NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		internal static int MakeTypelessNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[16])(fmt);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)vt[16])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "MakeTypeless")]
		[return: NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public static int MakeTypeless([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			int ret = MakeTypelessNative(fmt);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "MakeTypelessUNORM")]
		[return: NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		internal static int MakeTypelessUNORMNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[17])(fmt);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)vt[17])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "MakeTypelessUNORM")]
		[return: NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public static int MakeTypelessUNORM([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			int ret = MakeTypelessUNORMNative(fmt);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "MakeTypelessFLOAT")]
		[return: NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		internal static int MakeTypelessFLOANative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[18])(fmt);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)vt[18])(fmt);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "MakeTypelessFLOAT")]
		[return: NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public static int MakeTypelessFLOA([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt)
		{
			int ret = MakeTypelessFLOANative(fmt);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMetadataFromDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult GetMetadataFromDDSMemoryNative([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ulong, DDSFlags, TexMetadata*, HResult>)vt[19])(pSource, size, flags, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, ulong, DDSFlags, nint, HResult>)vt[19])((nint)pSource, size, flags, (nint)metadata);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromDDSMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromDDSMemoryNative(pSource, size, flags, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromDDSMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromDDSMemoryNative(pSource, size, flags, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromDDSMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromDDSMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromDDSMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromDDSMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMetadataFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult GetMetadataFromDDSFileNative([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, DDSFlags, TexMetadata*, HResult>)vt[20])(szFile, flags, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, DDSFlags, nint, HResult>)vt[20])((nint)szFile, flags, (nint)metadata);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromDDSFileNative(szFile, flags, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = GetMetadataFromDDSFileNative((char*)pszFile, flags, metadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = GetMetadataFromDDSFileNative(pStr0, flags, metadata);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromDDSFileNative(szFile, flags, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = GetMetadataFromDDSFileNative((char*)pszFile, flags, (TexMetadata*)pmetadata);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromDDSFileNative(pStr0, flags, (TexMetadata*)pmetadata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMetadataFromHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult GetMetadataFromHDRMemoryNative([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ulong, TexMetadata*, HResult>)vt[21])(pSource, size, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, ulong, nint, HResult>)vt[21])((nint)pSource, size, (nint)metadata);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromHDRMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromHDRMemoryNative(pSource, size, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromHDRMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromHDRMemoryNative(pSource, size, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromHDRMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromHDRMemoryNative(pSource, size, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromHDRMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromHDRMemoryNative(pSource, size, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMetadataFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult GetMetadataFromHDRFileNative([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, TexMetadata*, HResult>)vt[22])(szFile, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, HResult>)vt[22])((nint)szFile, (nint)metadata);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromHDRFileNative(szFile, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = GetMetadataFromHDRFileNative((char*)pszFile, metadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = GetMetadataFromHDRFileNative(pStr0, metadata);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromHDRFileNative(szFile, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = GetMetadataFromHDRFileNative((char*)pszFile, (TexMetadata*)pmetadata);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromHDRFileNative(pStr0, (TexMetadata*)pmetadata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMetadataFromTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult GetMetadataFromTGAMemoryNative([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ulong, TGAFlags, TexMetadata*, HResult>)vt[23])(pSource, size, flags, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, ulong, TGAFlags, nint, HResult>)vt[23])((nint)pSource, size, flags, (nint)metadata);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromTGAMemoryNative(pSource, size, flags, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromTGAMemoryNative(pSource, size, flags, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromTGAMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromTGAMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMetadataFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult GetMetadataFromTGAFileNative([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, TGAFlags, TexMetadata*, HResult>)vt[24])(szFile, flags, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, TGAFlags, nint, HResult>)vt[24])((nint)szFile, flags, (nint)metadata);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromTGAFileNative(szFile, flags, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = GetMetadataFromTGAFileNative((char*)pszFile, flags, metadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = GetMetadataFromTGAFileNative(pStr0, flags, metadata);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromTGAFileNative(szFile, flags, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = GetMetadataFromTGAFileNative((char*)pszFile, flags, (TexMetadata*)pmetadata);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromTGAFileNative(pStr0, flags, (TexMetadata*)pmetadata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// PNG operations<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMetadataFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult GetMetadataFromPNGFileNative([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, TexMetadata*, HResult>)vt[25])(szfile, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, HResult>)vt[25])((nint)szfile, (nint)metadata);
			#endif
		}

		/// <summary>/// PNG operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromPNGFileNative(szfile, metadata);
			return ret;
		}

		/// <summary>/// PNG operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			fixed (char* pszfile = &szfile)
			{
				HResult ret = GetMetadataFromPNGFileNative((char*)pszfile, metadata);
				return ret;
			}
		}

		/// <summary>/// PNG operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = GetMetadataFromPNGFileNative(pStr0, metadata);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// PNG operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromPNGFileNative(szfile, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// PNG operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (char* pszfile = &szfile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = GetMetadataFromPNGFileNative((char*)pszfile, (TexMetadata*)pmetadata);
					return ret;
				}
			}
		}

		/// <summary>/// PNG operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromPNGFileNative(pStr0, (TexMetadata*)pmetadata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// JPEG operations<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMetadataFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult GetMetadataFromJPEGFileNative([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, TexMetadata*, HResult>)vt[26])(szfile, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, HResult>)vt[26])((nint)szfile, (nint)metadata);
			#endif
		}

		/// <summary>/// JPEG operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromJPEGFileNative(szfile, metadata);
			return ret;
		}

		/// <summary>/// JPEG operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			fixed (char* pszfile = &szfile)
			{
				HResult ret = GetMetadataFromJPEGFileNative((char*)pszfile, metadata);
				return ret;
			}
		}

		/// <summary>/// JPEG operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = GetMetadataFromJPEGFileNative(pStr0, metadata);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// JPEG operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromJPEGFileNative(szfile, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// JPEG operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (char* pszfile = &szfile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = GetMetadataFromJPEGFileNative((char*)pszfile, (TexMetadata*)pmetadata);
					return ret;
				}
			}
		}

		/// <summary>/// JPEG operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromJPEGFileNative(pStr0, (TexMetadata*)pmetadata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// EXR operations<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMetadataFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult GetMetadataFromEXRFileNative([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, TexMetadata*, HResult>)vt[27])(szfile, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, HResult>)vt[27])((nint)szfile, (nint)metadata);
			#endif
		}

		/// <summary>/// EXR operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromEXRFileNative(szfile, metadata);
			return ret;
		}

		/// <summary>/// EXR operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			fixed (char* pszfile = &szfile)
			{
				HResult ret = GetMetadataFromEXRFileNative((char*)pszfile, metadata);
				return ret;
			}
		}

		/// <summary>/// EXR operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = GetMetadataFromEXRFileNative(pStr0, metadata);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// EXR operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromEXRFileNative(szfile, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// EXR operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (char* pszfile = &szfile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = GetMetadataFromEXRFileNative((char*)pszfile, (TexMetadata*)pmetadata);
					return ret;
				}
			}
		}

		/// <summary>/// EXR operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromEXRFileNative(pStr0, (TexMetadata*)pmetadata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMetadataFromWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult GetMetadataFromWICMemoryNative([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ulong, WICFlags, TexMetadata*, HResult>)vt[28])(pSource, size, flags, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, ulong, WICFlags, nint, HResult>)vt[28])((nint)pSource, size, flags, (nint)metadata);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromWICMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromWICMemoryNative(pSource, size, flags, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromWICMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromWICMemoryNative(pSource, size, flags, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromWICMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromWICMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromWICMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromWICMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMetadataFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult GetMetadataFromWICFileNative([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, WICFlags, TexMetadata*, HResult>)vt[29])(szFile, flags, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, WICFlags, nint, HResult>)vt[29])((nint)szFile, flags, (nint)metadata);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromWICFileNative(szFile, flags, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = GetMetadataFromWICFileNative((char*)pszFile, flags, metadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = GetMetadataFromWICFileNative(pStr0, flags, metadata);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromWICFileNative(szFile, flags, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = GetMetadataFromWICFileNative((char*)pszFile, flags, (TexMetadata*)pmetadata);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromWICFileNative(pStr0, flags, (TexMetadata*)pmetadata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compatability helpers<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMetadataFromTGAMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult GetMetadataFromTGAMemory2Native([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ulong, TexMetadata*, HResult>)vt[30])(pSource, size, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, ulong, nint, HResult>)vt[30])((nint)pSource, size, (nint)metadata);
			#endif
		}

		/// <summary>/// Compatability helpers<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAMemory2([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromTGAMemory2Native(pSource, size, metadata);
			return ret;
		}

		/// <summary>/// Compatability helpers<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAMemory2([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromTGAMemory2Native(pSource, size, metadata);
			return ret;
		}

		/// <summary>/// Compatability helpers<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAMemory2([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromTGAMemory2Native(pSource, size, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// Compatability helpers<br/>/// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAMemory2([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromTGAMemory2Native(pSource, size, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMetadataFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult GetMetadataFromTGAFile2Native([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, TexMetadata*, HResult>)vt[31])(szFile, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, HResult>)vt[31])((nint)szFile, (nint)metadata);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			HResult ret = GetMetadataFromTGAFile2Native(szFile, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = GetMetadataFromTGAFile2Native((char*)pszFile, metadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] TexMetadata* metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = GetMetadataFromTGAFile2Native(pStr0, metadata);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromTGAFile2Native(szFile, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = GetMetadataFromTGAFile2Native((char*)pszFile, (TexMetadata*)pmetadata);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadataFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult GetMetadataFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata&")] ref TexMetadata metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = GetMetadataFromTGAFile2Native(pStr0, (TexMetadata*)pmetadata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		internal static ulong ComputeIndexNative([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] ulong mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] ulong item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] ulong slice)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<TexMetadata*, ulong, ulong, ulong, ulong>)vt[32])(metadata, mip, item, slice);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<nint, ulong, ulong, ulong, ulong>)vt[32])((nint)metadata, mip, item, slice);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] ulong mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] ulong item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] ulong slice)
		{
			ulong ret = ComputeIndexNative(metadata, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] ulong mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] ulong item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] ulong slice)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				ulong ret = ComputeIndexNative((TexMetadata*)pmetadata, mip, item, slice);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] nuint mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] ulong item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] ulong slice)
		{
			ulong ret = ComputeIndexNative(metadata, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] nuint mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] ulong item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] ulong slice)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				ulong ret = ComputeIndexNative((TexMetadata*)pmetadata, mip, item, slice);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] ulong mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] nuint item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] ulong slice)
		{
			ulong ret = ComputeIndexNative(metadata, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] ulong mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] nuint item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] ulong slice)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				ulong ret = ComputeIndexNative((TexMetadata*)pmetadata, mip, item, slice);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] nuint mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] nuint item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] ulong slice)
		{
			ulong ret = ComputeIndexNative(metadata, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] nuint mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] nuint item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] ulong slice)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				ulong ret = ComputeIndexNative((TexMetadata*)pmetadata, mip, item, slice);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] ulong mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] ulong item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] nuint slice)
		{
			ulong ret = ComputeIndexNative(metadata, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] ulong mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] ulong item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] nuint slice)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				ulong ret = ComputeIndexNative((TexMetadata*)pmetadata, mip, item, slice);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] nuint mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] ulong item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] nuint slice)
		{
			ulong ret = ComputeIndexNative(metadata, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] nuint mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] ulong item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] nuint slice)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				ulong ret = ComputeIndexNative((TexMetadata*)pmetadata, mip, item, slice);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] ulong mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] nuint item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] nuint slice)
		{
			ulong ret = ComputeIndexNative(metadata, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] ulong mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] nuint item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] nuint slice)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				ulong ret = ComputeIndexNative((TexMetadata*)pmetadata, mip, item, slice);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] nuint mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] nuint item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] nuint slice)
		{
			ulong ret = ComputeIndexNative(metadata, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ComputeIndex")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ComputeIndex([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] nuint mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] nuint item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] nuint slice)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				ulong ret = ComputeIndexNative((TexMetadata*)pmetadata, mip, item, slice);
				return ret;
			}
		}

		/// <summary>
		/// Returns size_t(-1) to indicate an out-of-range error<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "IsCubemap")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsCubemapNative([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<TexMetadata*, byte>)vt[33])(metadata);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[33])((nint)metadata);
			#endif
		}

		/// <summary>/// Returns size_t(-1) to indicate an out-of-range error<br/>/// </summary>		[NativeName(NativeNameType.Func, "IsCubemap")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsCubemap([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata)
		{
			byte ret = IsCubemapNative(metadata);
			return ret != 0;
		}

		/// <summary>/// Returns size_t(-1) to indicate an out-of-range error<br/>/// </summary>		[NativeName(NativeNameType.Func, "IsCubemap")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsCubemap([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				byte ret = IsCubemapNative((TexMetadata*)pmetadata);
				return ret != 0;
			}
		}

		/// <summary>
		/// Helper for miscFlags<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "IsPMAlpha")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsPMAlphaNative([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<TexMetadata*, byte>)vt[34])(metadata);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[34])((nint)metadata);
			#endif
		}

		/// <summary>/// Helper for miscFlags<br/>/// </summary>		[NativeName(NativeNameType.Func, "IsPMAlpha")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPMAlpha([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata)
		{
			byte ret = IsPMAlphaNative(metadata);
			return ret != 0;
		}

		/// <summary>/// Helper for miscFlags<br/>/// </summary>		[NativeName(NativeNameType.Func, "IsPMAlpha")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPMAlpha([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				byte ret = IsPMAlphaNative((TexMetadata*)pmetadata);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetAlphaMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetAlphaModeNative([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "TEX_ALPHA_MODE")] TexAlphaMode mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<TexMetadata*, TexAlphaMode, void>)vt[35])(metadata, mode);
			#else
			((delegate* unmanaged[Cdecl]<nint, TexAlphaMode, void>)vt[35])((nint)metadata, mode);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetAlphaMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAlphaMode([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "TEX_ALPHA_MODE")] TexAlphaMode mode)
		{
			SetAlphaModeNative(metadata, mode);
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetAlphaMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAlphaMode([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "TEX_ALPHA_MODE")] TexAlphaMode mode)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				SetAlphaModeNative((TexMetadata*)pmetadata, mode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetAlphaMode")]
		[return: NativeName(NativeNameType.Type, "TEX_ALPHA_MODE")]
		internal static TexAlphaMode GetAlphaModeNative([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<TexMetadata*, TexAlphaMode>)vt[36])(metadata);
			#else
			return (TexAlphaMode)((delegate* unmanaged[Cdecl]<nint, TexAlphaMode>)vt[36])((nint)metadata);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetAlphaMode")]
		[return: NativeName(NativeNameType.Type, "TEX_ALPHA_MODE")]
		public static TexAlphaMode GetAlphaMode([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata)
		{
			TexAlphaMode ret = GetAlphaModeNative(metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetAlphaMode")]
		[return: NativeName(NativeNameType.Type, "TEX_ALPHA_MODE")]
		public static TexAlphaMode GetAlphaMode([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				TexAlphaMode ret = GetAlphaModeNative((TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>
		/// Helpers for miscFlags2<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "IsVolumemap")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsVolumemapNative([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<TexMetadata*, byte>)vt[37])(metadata);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[37])((nint)metadata);
			#endif
		}

		/// <summary>/// Helpers for miscFlags2<br/>/// </summary>		[NativeName(NativeNameType.Func, "IsVolumemap")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsVolumemap([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata)
		{
			byte ret = IsVolumemapNative(metadata);
			return ret != 0;
		}

		/// <summary>/// Helpers for miscFlags2<br/>/// </summary>		[NativeName(NativeNameType.Func, "IsVolumemap")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsVolumemap([NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				byte ret = IsVolumemapNative((TexMetadata*)pmetadata);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateScratchImage")]
		[return: NativeName(NativeNameType.Type, "ScratchImageT")]
		internal static ScratchImage CreateScratchImageNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage>)vt[38])();
			#else
			return (ScratchImage)((delegate* unmanaged[Cdecl]<ScratchImage>)vt[38])();
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateScratchImage")]
		[return: NativeName(NativeNameType.Type, "ScratchImageT")]
		public static ScratchImage CreateScratchImage()
		{
			ScratchImage ret = CreateScratchImageNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Initialize")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult InitializeNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "mdata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* mdata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, TexMetadata*, CPFlags, HResult>)vt[39])(img, mdata, flags);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<ScratchImage, nint, CPFlags, HResult>)vt[39])(img, (nint)mdata, flags);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "mdata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* mdata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeNative(img, mdata, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "mdata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata mdata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (TexMetadata* pmdata = &mdata)
			{
				HResult ret = InitializeNative(img, (TexMetadata*)pmdata, flags);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Initialize1D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult Initialize1DNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "size_t")] ulong length, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, int, ulong, ulong, ulong, CPFlags, HResult>)vt[40])(img, fmt, length, arraySize, mipLevels, flags);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<ScratchImage, int, ulong, ulong, ulong, CPFlags, HResult>)vt[40])(img, fmt, length, arraySize, mipLevels, flags);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize1D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize1D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "size_t")] ulong length, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize1DNative(img, fmt, length, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize1D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize1D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "size_t")] nuint length, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize1DNative(img, fmt, length, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize1D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize1D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "size_t")] ulong length, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize1DNative(img, fmt, length, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize1D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize1D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "size_t")] nuint length, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize1DNative(img, fmt, length, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize1D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize1D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "size_t")] ulong length, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize1DNative(img, fmt, length, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize1D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize1D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "size_t")] nuint length, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize1DNative(img, fmt, length, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize1D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize1D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "size_t")] ulong length, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize1DNative(img, fmt, length, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize1D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize1D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "size_t")] nuint length, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize1DNative(img, fmt, length, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult Initialize2DNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, int, ulong, ulong, ulong, ulong, CPFlags, HResult>)vt[41])(img, fmt, width, height, arraySize, mipLevels, flags);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<ScratchImage, int, ulong, ulong, ulong, ulong, CPFlags, HResult>)vt[41])(img, fmt, width, height, arraySize, mipLevels, flags);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize2D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize2D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "arraySize")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize2DNative(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult Initialize3DNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] ulong depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, int, ulong, ulong, ulong, ulong, CPFlags, HResult>)vt[42])(img, fmt, width, height, depth, mipLevels, flags);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<ScratchImage, int, ulong, ulong, ulong, ulong, CPFlags, HResult>)vt[42])(img, fmt, width, height, depth, mipLevels, flags);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] ulong depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] ulong depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] ulong depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] ulong depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] nuint depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] nuint depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] nuint depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] nuint depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] ulong depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] ulong depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] ulong depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] ulong depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] nuint depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] nuint depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] nuint depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3D")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3D([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] nuint depth, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DNative(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult InitializeCubeNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] ulong nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, int, ulong, ulong, ulong, ulong, CPFlags, HResult>)vt[43])(img, fmt, width, height, nCubes, mipLevels, flags);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<ScratchImage, int, ulong, ulong, ulong, ulong, CPFlags, HResult>)vt[43])(img, fmt, width, height, nCubes, mipLevels, flags);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] ulong nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] ulong nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] ulong nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] ulong nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] nuint nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] nuint nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] nuint nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] nuint nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] ulong mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] ulong nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] ulong nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] ulong nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] ulong nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] nuint nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] ulong height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] nuint nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] ulong width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] nuint nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCube")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCube([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int fmt, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "size_t")] nuint width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "size_t")] nuint height, [NativeName(NativeNameType.Param, "nCubes")] [NativeName(NativeNameType.Type, "size_t")] nuint nCubes, [NativeName(NativeNameType.Param, "mipLevels")] [NativeName(NativeNameType.Type, "size_t")] nuint mipLevels, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeNative(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "InitializeFromImage")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult InitializeFromImageNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "srcImage")] [NativeName(NativeNameType.Type, "Image const")] Image srcImage, [NativeName(NativeNameType.Param, "allow1D")] [NativeName(NativeNameType.Type, "bool")] byte allow1D, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, Image, byte, CPFlags, HResult>)vt[44])(img, srcImage, allow1D, flags);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<ScratchImage, Image, byte, CPFlags, HResult>)vt[44])(img, srcImage, allow1D, flags);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeFromImage")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeFromImage([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "srcImage")] [NativeName(NativeNameType.Type, "Image const")] Image srcImage, [NativeName(NativeNameType.Param, "allow1D")] [NativeName(NativeNameType.Type, "bool")] bool allow1D, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeFromImageNative(img, srcImage, allow1D ? (byte)1 : (byte)0, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "InitializeArrayFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult InitializeArrayFromImagesNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nImages")] [NativeName(NativeNameType.Type, "size_t")] ulong nImages, [NativeName(NativeNameType.Param, "allow1D")] [NativeName(NativeNameType.Type, "bool")] byte allow1D, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, Image*, ulong, byte, CPFlags, HResult>)vt[45])(img, images, nImages, allow1D, flags);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<ScratchImage, nint, ulong, byte, CPFlags, HResult>)vt[45])(img, (nint)images, nImages, allow1D, flags);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeArrayFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeArrayFromImages([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nImages")] [NativeName(NativeNameType.Type, "size_t")] ulong nImages, [NativeName(NativeNameType.Param, "allow1D")] [NativeName(NativeNameType.Type, "bool")] bool allow1D, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeArrayFromImagesNative(img, images, nImages, allow1D ? (byte)1 : (byte)0, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeArrayFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeArrayFromImages([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nImages")] [NativeName(NativeNameType.Type, "size_t")] ulong nImages, [NativeName(NativeNameType.Param, "allow1D")] [NativeName(NativeNameType.Type, "bool")] bool allow1D, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (Image* pimages = &images)
			{
				HResult ret = InitializeArrayFromImagesNative(img, (Image*)pimages, nImages, allow1D ? (byte)1 : (byte)0, flags);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeArrayFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeArrayFromImages([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nImages")] [NativeName(NativeNameType.Type, "size_t")] nuint nImages, [NativeName(NativeNameType.Param, "allow1D")] [NativeName(NativeNameType.Type, "bool")] bool allow1D, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeArrayFromImagesNative(img, images, nImages, allow1D ? (byte)1 : (byte)0, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeArrayFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeArrayFromImages([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nImages")] [NativeName(NativeNameType.Type, "size_t")] nuint nImages, [NativeName(NativeNameType.Param, "allow1D")] [NativeName(NativeNameType.Type, "bool")] bool allow1D, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (Image* pimages = &images)
			{
				HResult ret = InitializeArrayFromImagesNative(img, (Image*)pimages, nImages, allow1D ? (byte)1 : (byte)0, flags);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "InitializeCubeFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult InitializeCubeFromImagesNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nImages")] [NativeName(NativeNameType.Type, "size_t")] ulong nImages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, Image*, ulong, CPFlags, HResult>)vt[46])(img, images, nImages, flags);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<ScratchImage, nint, ulong, CPFlags, HResult>)vt[46])(img, (nint)images, nImages, flags);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCubeFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCubeFromImages([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nImages")] [NativeName(NativeNameType.Type, "size_t")] ulong nImages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeFromImagesNative(img, images, nImages, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCubeFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCubeFromImages([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nImages")] [NativeName(NativeNameType.Type, "size_t")] ulong nImages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (Image* pimages = &images)
			{
				HResult ret = InitializeCubeFromImagesNative(img, (Image*)pimages, nImages, flags);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCubeFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCubeFromImages([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nImages")] [NativeName(NativeNameType.Type, "size_t")] nuint nImages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = InitializeCubeFromImagesNative(img, images, nImages, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "InitializeCubeFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult InitializeCubeFromImages([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nImages")] [NativeName(NativeNameType.Type, "size_t")] nuint nImages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (Image* pimages = &images)
			{
				HResult ret = InitializeCubeFromImagesNative(img, (Image*)pimages, nImages, flags);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Initialize3DFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult Initialize3DFromImagesNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] ulong depth, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, Image*, ulong, CPFlags, HResult>)vt[47])(img, images, depth, flags);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<ScratchImage, nint, ulong, CPFlags, HResult>)vt[47])(img, (nint)images, depth, flags);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3DFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3DFromImages([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] ulong depth, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DFromImagesNative(img, images, depth, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3DFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3DFromImages([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] ulong depth, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (Image* pimages = &images)
			{
				HResult ret = Initialize3DFromImagesNative(img, (Image*)pimages, depth, flags);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3DFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3DFromImages([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] nuint depth, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			HResult ret = Initialize3DFromImagesNative(img, images, depth, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Initialize3DFromImages")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult Initialize3DFromImages([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "size_t")] nuint depth, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "CP_FLAGS")] CPFlags flags)
		{
			fixed (Image* pimages = &images)
			{
				HResult ret = Initialize3DFromImagesNative(img, (Image*)pimages, depth, flags);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ScratchImageRelease")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ScratchImageReleaseNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ScratchImage, void>)vt[48])(img);
			#else
			((delegate* unmanaged[Cdecl]<ScratchImage, void>)vt[48])(img);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ScratchImageRelease")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScratchImageRelease([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img)
		{
			ScratchImageReleaseNative(img);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "OverrideFormat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte OverrideFormatNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int f)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, int, byte>)vt[49])(img, f);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ScratchImage, int, byte>)vt[49])(img, f);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "OverrideFormat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool OverrideFormat([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] int f)
		{
			byte ret = OverrideFormatNative(img, f);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMetadata")]
		[return: NativeName(NativeNameType.Type, "TexMetadata const")]
		internal static TexMetadata GetMetadataNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, TexMetadata>)vt[50])(img);
			#else
			return (TexMetadata)((delegate* unmanaged[Cdecl]<ScratchImage, TexMetadata>)vt[50])(img);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMetadata")]
		[return: NativeName(NativeNameType.Type, "TexMetadata const")]
		public static TexMetadata GetMetadata([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img)
		{
			TexMetadata ret = GetMetadataNative(img);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetImage")]
		[return: NativeName(NativeNameType.Type, "Image const *")]
		internal static Image* GetImageNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] ulong mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] ulong item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] ulong slice)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, ulong, ulong, ulong, Image*>)vt[51])(img, mip, item, slice);
			#else
			return (Image*)((delegate* unmanaged[Cdecl]<ScratchImage, ulong, ulong, ulong, nint>)vt[51])(img, mip, item, slice);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetImage")]
		[return: NativeName(NativeNameType.Type, "Image const *")]
		public static Image* GetImage([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] ulong mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] ulong item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] ulong slice)
		{
			Image* ret = GetImageNative(img, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetImage")]
		[return: NativeName(NativeNameType.Type, "Image const *")]
		public static Image* GetImage([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] nuint mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] ulong item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] ulong slice)
		{
			Image* ret = GetImageNative(img, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetImage")]
		[return: NativeName(NativeNameType.Type, "Image const *")]
		public static Image* GetImage([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] ulong mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] nuint item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] ulong slice)
		{
			Image* ret = GetImageNative(img, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetImage")]
		[return: NativeName(NativeNameType.Type, "Image const *")]
		public static Image* GetImage([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] nuint mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] nuint item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] ulong slice)
		{
			Image* ret = GetImageNative(img, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetImage")]
		[return: NativeName(NativeNameType.Type, "Image const *")]
		public static Image* GetImage([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] ulong mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] ulong item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] nuint slice)
		{
			Image* ret = GetImageNative(img, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetImage")]
		[return: NativeName(NativeNameType.Type, "Image const *")]
		public static Image* GetImage([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] nuint mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] ulong item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] nuint slice)
		{
			Image* ret = GetImageNative(img, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetImage")]
		[return: NativeName(NativeNameType.Type, "Image const *")]
		public static Image* GetImage([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] ulong mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] nuint item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] nuint slice)
		{
			Image* ret = GetImageNative(img, mip, item, slice);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetImage")]
		[return: NativeName(NativeNameType.Type, "Image const *")]
		public static Image* GetImage([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img, [NativeName(NativeNameType.Param, "mip")] [NativeName(NativeNameType.Type, "size_t")] nuint mip, [NativeName(NativeNameType.Param, "item")] [NativeName(NativeNameType.Type, "size_t")] nuint item, [NativeName(NativeNameType.Param, "slice")] [NativeName(NativeNameType.Type, "size_t")] nuint slice)
		{
			Image* ret = GetImageNative(img, mip, item, slice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetImages")]
		[return: NativeName(NativeNameType.Type, "Image const *")]
		internal static Image* GetImagesNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, Image*>)vt[52])(img);
			#else
			return (Image*)((delegate* unmanaged[Cdecl]<ScratchImage, nint>)vt[52])(img);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetImages")]
		[return: NativeName(NativeNameType.Type, "Image const *")]
		public static Image* GetImages([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img)
		{
			Image* ret = GetImagesNative(img);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetImageCount")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		internal static ulong GetImageCountNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, ulong>)vt[53])(img);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<ScratchImage, ulong>)vt[53])(img);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetImageCount")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong GetImageCount([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img)
		{
			ulong ret = GetImageCountNative(img);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPixels")]
		[return: NativeName(NativeNameType.Type, "uint8_t *")]
		internal static byte* GetPixelsNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, byte*>)vt[54])(img);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<ScratchImage, nint>)vt[54])(img);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetPixels")]
		[return: NativeName(NativeNameType.Type, "uint8_t *")]
		public static byte* GetPixels([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img)
		{
			byte* ret = GetPixelsNative(img);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPixelsSize")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		internal static ulong GetPixelsSizeNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, ulong>)vt[55])(img);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<ScratchImage, ulong>)vt[55])(img);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetPixelsSize")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong GetPixelsSize([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img)
		{
			ulong ret = GetPixelsSizeNative(img);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsAlphaAllOpaque")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsAlphaAllOpaqueNative([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ScratchImage, byte>)vt[56])(img);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ScratchImage, byte>)vt[56])(img);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsAlphaAllOpaque")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsAlphaAllOpaque([NativeName(NativeNameType.Param, "img")] [NativeName(NativeNameType.Type, "ScratchImageT")] ScratchImage img)
		{
			byte ret = IsAlphaAllOpaqueNative(img);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateBlob")]
		[return: NativeName(NativeNameType.Type, "BlobT")]
		internal static Blob CreateBlobNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Blob>)vt[57])();
			#else
			return (Blob)((delegate* unmanaged[Cdecl]<Blob>)vt[57])();
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateBlob")]
		[return: NativeName(NativeNameType.Type, "BlobT")]
		public static Blob CreateBlob()
		{
			Blob ret = CreateBlobNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BlobInitialize")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult BlobInitializeNative([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Blob, ulong, HResult>)vt[58])(blob, size);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<Blob, ulong, HResult>)vt[58])(blob, size);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "BlobInitialize")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult BlobInitialize([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size)
		{
			HResult ret = BlobInitializeNative(blob, size);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "BlobInitialize")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult BlobInitialize([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			HResult ret = BlobInitializeNative(blob, size);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BlobRelease")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BlobReleaseNative([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Blob, void>)vt[59])(blob);
			#else
			((delegate* unmanaged[Cdecl]<Blob, void>)vt[59])(blob);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "BlobRelease")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BlobRelease([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob)
		{
			BlobReleaseNative(blob);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BlobGetBufferPointer")]
		[return: NativeName(NativeNameType.Type, "void *")]
		internal static void* BlobGetBufferPointerNative([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Blob, void*>)vt[60])(blob);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<Blob, nint>)vt[60])(blob);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "BlobGetBufferPointer")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* BlobGetBufferPointer([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob)
		{
			void* ret = BlobGetBufferPointerNative(blob);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BlobGetBufferSize")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		internal static ulong BlobGetBufferSizeNative([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Blob, ulong>)vt[61])(blob);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<Blob, ulong>)vt[61])(blob);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "BlobGetBufferSize")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong BlobGetBufferSize([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob)
		{
			ulong ret = BlobGetBufferSizeNative(blob);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BlobResize")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult BlobResizeNative([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Blob, ulong, HResult>)vt[62])(blob, size);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<Blob, ulong, HResult>)vt[62])(blob, size);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "BlobResize")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult BlobResize([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size)
		{
			HResult ret = BlobResizeNative(blob, size);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "BlobResize")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult BlobResize([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			HResult ret = BlobResizeNative(blob, size);
			return ret;
		}

		/// <summary>
		/// Reallocate for a new size<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "BlobTrim")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult BlobTrimNative([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Blob, ulong, HResult>)vt[63])(blob, size);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<Blob, ulong, HResult>)vt[63])(blob, size);
			#endif
		}

		/// <summary>/// Reallocate for a new size<br/>/// </summary>		[NativeName(NativeNameType.Func, "BlobTrim")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult BlobTrim([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size)
		{
			HResult ret = BlobTrimNative(blob, size);
			return ret;
		}

		/// <summary>/// Reallocate for a new size<br/>/// </summary>		[NativeName(NativeNameType.Func, "BlobTrim")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult BlobTrim([NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT")] Blob blob, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			HResult ret = BlobTrimNative(blob, size);
			return ret;
		}

		/// <summary>
		/// DDS operations<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFromDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult LoadFromDDSMemoryNative([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ulong, DDSFlags, TexMetadata*, ScratchImage*, HResult>)vt[64])(pSource, size, flags, metadata, image);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, ulong, DDSFlags, nint, nint, HResult>)vt[64])((nint)pSource, size, flags, (nint)metadata, (nint)image);
			#endif
		}

		/// <summary>/// DDS operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromDDSMemoryNative(pSource, size, flags, metadata, image);
			return ret;
		}

		/// <summary>/// DDS operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromDDSMemoryNative(pSource, size, flags, metadata, image);
			return ret;
		}

		/// <summary>/// DDS operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromDDSMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// DDS operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromDDSMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// DDS operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromDDSMemoryNative(pSource, size, flags, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// DDS operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromDDSMemoryNative(pSource, size, flags, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// DDS operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromDDSMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// DDS operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromDDSMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult LoadFromDDSFileNative([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, DDSFlags, TexMetadata*, ScratchImage*, HResult>)vt[65])(szFile, flags, metadata, image);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, DDSFlags, nint, nint, HResult>)vt[65])((nint)szFile, flags, (nint)metadata, (nint)image);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromDDSFileNative(szFile, flags, metadata, image);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = LoadFromDDSFileNative((char*)pszFile, flags, metadata, image);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = LoadFromDDSFileNative(pStr0, flags, metadata, image);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromDDSFileNative(szFile, flags, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = LoadFromDDSFileNative((char*)pszFile, flags, (TexMetadata*)pmetadata, image);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromDDSFileNative(pStr0, flags, (TexMetadata*)pmetadata, image);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromDDSFileNative(szFile, flags, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromDDSFileNative((char*)pszFile, flags, metadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromDDSFileNative(pStr0, flags, metadata, (ScratchImage*)pimage);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromDDSFileNative(szFile, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					fixed (ScratchImage* pimage = &image)
					{
						HResult ret = LoadFromDDSFileNative((char*)pszFile, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromDDSFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromDDSFileNative(pStr0, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToDDSMemoryNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, DDSFlags, Blob*, HResult>)vt[66])(image, flags, blob);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, DDSFlags, nint, HResult>)vt[66])((nint)image, flags, (nint)blob);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			HResult ret = SaveToDDSMemoryNative(image, flags, blob);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			fixed (Image* pimage = &image)
			{
				HResult ret = SaveToDDSMemoryNative((Image*)pimage, flags, blob);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob)
		{
			fixed (Blob* pblob = &blob)
			{
				HResult ret = SaveToDDSMemoryNative(image, flags, (Blob*)pblob);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob)
		{
			fixed (Image* pimage = &image)
			{
				fixed (Blob* pblob = &blob)
				{
					HResult ret = SaveToDDSMemoryNative((Image*)pimage, flags, (Blob*)pblob);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToDDSMemory2Native([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, ulong, TexMetadata*, DDSFlags, Blob*, HResult>)vt[67])(images, nimages, metadata, flags, blob);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, ulong, nint, DDSFlags, nint, HResult>)vt[67])((nint)images, nimages, (nint)metadata, flags, (nint)blob);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			HResult ret = SaveToDDSMemory2Native(images, nimages, metadata, flags, blob);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			fixed (Image* pimages = &images)
			{
				HResult ret = SaveToDDSMemory2Native((Image*)pimages, nimages, metadata, flags, blob);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			HResult ret = SaveToDDSMemory2Native(images, nimages, metadata, flags, blob);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			fixed (Image* pimages = &images)
			{
				HResult ret = SaveToDDSMemory2Native((Image*)pimages, nimages, metadata, flags, blob);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = SaveToDDSMemory2Native(images, nimages, (TexMetadata*)pmetadata, flags, blob);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			fixed (Image* pimages = &images)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = SaveToDDSMemory2Native((Image*)pimages, nimages, (TexMetadata*)pmetadata, flags, blob);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = SaveToDDSMemory2Native(images, nimages, (TexMetadata*)pmetadata, flags, blob);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			fixed (Image* pimages = &images)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = SaveToDDSMemory2Native((Image*)pimages, nimages, (TexMetadata*)pmetadata, flags, blob);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob)
		{
			fixed (Blob* pblob = &blob)
			{
				HResult ret = SaveToDDSMemory2Native(images, nimages, metadata, flags, (Blob*)pblob);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob)
		{
			fixed (Image* pimages = &images)
			{
				fixed (Blob* pblob = &blob)
				{
					HResult ret = SaveToDDSMemory2Native((Image*)pimages, nimages, metadata, flags, (Blob*)pblob);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob)
		{
			fixed (Blob* pblob = &blob)
			{
				HResult ret = SaveToDDSMemory2Native(images, nimages, metadata, flags, (Blob*)pblob);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob)
		{
			fixed (Image* pimages = &images)
			{
				fixed (Blob* pblob = &blob)
				{
					HResult ret = SaveToDDSMemory2Native((Image*)pimages, nimages, metadata, flags, (Blob*)pblob);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (Blob* pblob = &blob)
				{
					HResult ret = SaveToDDSMemory2Native(images, nimages, (TexMetadata*)pmetadata, flags, (Blob*)pblob);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob)
		{
			fixed (Image* pimages = &images)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					fixed (Blob* pblob = &blob)
					{
						HResult ret = SaveToDDSMemory2Native((Image*)pimages, nimages, (TexMetadata*)pmetadata, flags, (Blob*)pblob);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (Blob* pblob = &blob)
				{
					HResult ret = SaveToDDSMemory2Native(images, nimages, (TexMetadata*)pmetadata, flags, (Blob*)pblob);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob)
		{
			fixed (Image* pimages = &images)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					fixed (Blob* pblob = &blob)
					{
						HResult ret = SaveToDDSMemory2Native((Image*)pimages, nimages, (TexMetadata*)pmetadata, flags, (Blob*)pblob);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToDDSFileNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, DDSFlags, char*, HResult>)vt[68])(image, flags, szFile);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, DDSFlags, nint, HResult>)vt[68])((nint)image, flags, (nint)szFile);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			HResult ret = SaveToDDSFileNative(image, flags, szFile);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			fixed (Image* pimage = &image)
			{
				HResult ret = SaveToDDSFileNative((Image*)pimage, flags, szFile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = SaveToDDSFileNative(image, flags, (char*)pszFile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = SaveToDDSFileNative(image, flags, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile)
		{
			fixed (Image* pimage = &image)
			{
				fixed (char* pszFile = &szFile)
				{
					HResult ret = SaveToDDSFileNative((Image*)pimage, flags, (char*)pszFile);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile)
		{
			fixed (Image* pimage = &image)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szFile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szFile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = SaveToDDSFileNative((Image*)pimage, flags, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToDDSFile2Native([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, ulong, TexMetadata*, DDSFlags, char*, HResult>)vt[69])(images, nimages, metadata, flags, szFile);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, ulong, nint, DDSFlags, nint, HResult>)vt[69])((nint)images, nimages, (nint)metadata, flags, (nint)szFile);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			HResult ret = SaveToDDSFile2Native(images, nimages, metadata, flags, szFile);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			fixed (Image* pimages = &images)
			{
				HResult ret = SaveToDDSFile2Native((Image*)pimages, nimages, metadata, flags, szFile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			HResult ret = SaveToDDSFile2Native(images, nimages, metadata, flags, szFile);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			fixed (Image* pimages = &images)
			{
				HResult ret = SaveToDDSFile2Native((Image*)pimages, nimages, metadata, flags, szFile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = SaveToDDSFile2Native(images, nimages, (TexMetadata*)pmetadata, flags, szFile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			fixed (Image* pimages = &images)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = SaveToDDSFile2Native((Image*)pimages, nimages, (TexMetadata*)pmetadata, flags, szFile);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = SaveToDDSFile2Native(images, nimages, (TexMetadata*)pmetadata, flags, szFile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			fixed (Image* pimages = &images)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = SaveToDDSFile2Native((Image*)pimages, nimages, (TexMetadata*)pmetadata, flags, szFile);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = SaveToDDSFile2Native(images, nimages, metadata, flags, (char*)pszFile);
				return ret;
			}
		}
	}
}
