// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

#if !STANDALONE
using Silk.NET.DXGI;
using Silk.NET.Direct2D;
using Silk.NET.Direct3D11;
using Silk.NET.Direct3D12;
#endif
namespace Hexa.NET.DirectXTex
{
	public unsafe partial class DirectXTex
	{

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = SaveToDDSFile2Native(images, nimages, metadata, flags, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile)
		{
			fixed (Image* pimages = &images)
			{
				fixed (char* pszFile = &szFile)
				{
					HResult ret = SaveToDDSFile2Native((Image*)pimages, nimages, metadata, flags, (char*)pszFile);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile)
		{
			fixed (Image* pimages = &images)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szFile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szFile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = SaveToDDSFile2Native((Image*)pimages, nimages, metadata, flags, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = SaveToDDSFile2Native(images, nimages, metadata, flags, (char*)pszFile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = SaveToDDSFile2Native(images, nimages, metadata, flags, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile)
		{
			fixed (Image* pimages = &images)
			{
				fixed (char* pszFile = &szFile)
				{
					HResult ret = SaveToDDSFile2Native((Image*)pimages, nimages, metadata, flags, (char*)pszFile);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile)
		{
			fixed (Image* pimages = &images)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szFile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szFile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = SaveToDDSFile2Native((Image*)pimages, nimages, metadata, flags, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (char* pszFile = &szFile)
				{
					HResult ret = SaveToDDSFile2Native(images, nimages, (TexMetadata*)pmetadata, flags, (char*)pszFile);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szFile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szFile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = SaveToDDSFile2Native(images, nimages, (TexMetadata*)pmetadata, flags, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile)
		{
			fixed (Image* pimages = &images)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					fixed (char* pszFile = &szFile)
					{
						HResult ret = SaveToDDSFile2Native((Image*)pimages, nimages, (TexMetadata*)pmetadata, flags, (char*)pszFile);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile)
		{
			fixed (Image* pimages = &images)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					char* pStr0 = null;
					int pStrSize0 = 0;
					if (szFile != null)
					{
						pStrSize0 = Utils.GetByteCountUTF16(szFile);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
							pStr0 = (char*)pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
						pStr0[pStrOffset0] = '\0';
					}
					HResult ret = SaveToDDSFile2Native((Image*)pimages, nimages, (TexMetadata*)pmetadata, flags, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (char* pszFile = &szFile)
				{
					HResult ret = SaveToDDSFile2Native(images, nimages, (TexMetadata*)pmetadata, flags, (char*)pszFile);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szFile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szFile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = SaveToDDSFile2Native(images, nimages, (TexMetadata*)pmetadata, flags, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile)
		{
			fixed (Image* pimages = &images)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					fixed (char* pszFile = &szFile)
					{
						HResult ret = SaveToDDSFile2Native((Image*)pimages, nimages, (TexMetadata*)pmetadata, flags, (char*)pszFile);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToDDSFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToDDSFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const&")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "DDS_FLAGS")] DDSFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile)
		{
			fixed (Image* pimages = &images)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					char* pStr0 = null;
					int pStrSize0 = 0;
					if (szFile != null)
					{
						pStrSize0 = Utils.GetByteCountUTF16(szFile);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
							pStr0 = (char*)pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
						pStr0[pStrOffset0] = '\0';
					}
					HResult ret = SaveToDDSFile2Native((Image*)pimages, nimages, (TexMetadata*)pmetadata, flags, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// HDR operations<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFromHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult LoadFromHDRMemoryNative([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ulong, TexMetadata*, ScratchImage*, HResult>)vt[70])(pSource, size, metadata, image);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, ulong, nint, nint, HResult>)vt[70])((nint)pSource, size, (nint)metadata, (nint)image);
			#endif
		}

		/// <summary>/// HDR operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromHDRMemoryNative(pSource, size, metadata, image);
			return ret;
		}

		/// <summary>/// HDR operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromHDRMemoryNative(pSource, size, metadata, image);
			return ret;
		}

		/// <summary>/// HDR operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromHDRMemoryNative(pSource, size, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// HDR operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromHDRMemoryNative(pSource, size, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// HDR operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromHDRMemoryNative(pSource, size, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// HDR operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromHDRMemoryNative(pSource, size, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// HDR operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromHDRMemoryNative(pSource, size, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// HDR operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromHDRMemoryNative(pSource, size, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult LoadFromHDRFileNative([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, TexMetadata*, ScratchImage*, HResult>)vt[71])(szFile, metadata, image);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, HResult>)vt[71])((nint)szFile, (nint)metadata, (nint)image);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromHDRFileNative(szFile, metadata, image);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = LoadFromHDRFileNative((char*)pszFile, metadata, image);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = LoadFromHDRFileNative(pStr0, metadata, image);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromHDRFileNative(szFile, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = LoadFromHDRFileNative((char*)pszFile, (TexMetadata*)pmetadata, image);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromHDRFileNative(pStr0, (TexMetadata*)pmetadata, image);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromHDRFileNative(szFile, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromHDRFileNative((char*)pszFile, metadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromHDRFileNative(pStr0, metadata, (ScratchImage*)pimage);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromHDRFileNative(szFile, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					fixed (ScratchImage* pimage = &image)
					{
						HResult ret = LoadFromHDRFileNative((char*)pszFile, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromHDRFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromHDRFileNative(pStr0, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToHDRMemoryNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, Blob*, HResult>)vt[72])(image, blob);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, HResult>)vt[72])((nint)image, (nint)blob);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToHDRMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			HResult ret = SaveToHDRMemoryNative(image, blob);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToHDRMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob)
		{
			fixed (Image* pimage = &image)
			{
				HResult ret = SaveToHDRMemoryNative((Image*)pimage, blob);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToHDRMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob)
		{
			fixed (Blob* pblob = &blob)
			{
				HResult ret = SaveToHDRMemoryNative(image, (Blob*)pblob);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToHDRMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToHDRMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob)
		{
			fixed (Image* pimage = &image)
			{
				fixed (Blob* pblob = &blob)
				{
					HResult ret = SaveToHDRMemoryNative((Image*)pimage, (Blob*)pblob);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToHDRFileNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, char*, HResult>)vt[73])(image, szFile);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, HResult>)vt[73])((nint)image, (nint)szFile);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToHDRFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			HResult ret = SaveToHDRFileNative(image, szFile);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToHDRFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile)
		{
			fixed (Image* pimage = &image)
			{
				HResult ret = SaveToHDRFileNative((Image*)pimage, szFile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToHDRFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = SaveToHDRFileNative(image, (char*)pszFile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToHDRFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = SaveToHDRFileNative(image, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToHDRFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile)
		{
			fixed (Image* pimage = &image)
			{
				fixed (char* pszFile = &szFile)
				{
					HResult ret = SaveToHDRFileNative((Image*)pimage, (char*)pszFile);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToHDRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToHDRFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile)
		{
			fixed (Image* pimage = &image)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szFile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szFile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = SaveToHDRFileNative((Image*)pimage, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// TGA operations<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFromTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult LoadFromTGAMemoryNative([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ulong, TGAFlags, TexMetadata*, ScratchImage*, HResult>)vt[74])(pSource, size, flags, metadata, image);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, ulong, TGAFlags, nint, nint, HResult>)vt[74])((nint)pSource, size, flags, (nint)metadata, (nint)image);
			#endif
		}

		/// <summary>/// TGA operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromTGAMemoryNative(pSource, size, flags, metadata, image);
			return ret;
		}

		/// <summary>/// TGA operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromTGAMemoryNative(pSource, size, flags, metadata, image);
			return ret;
		}

		/// <summary>/// TGA operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromTGAMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// TGA operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromTGAMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// TGA operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromTGAMemoryNative(pSource, size, flags, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// TGA operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromTGAMemoryNative(pSource, size, flags, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// TGA operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromTGAMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// TGA operations<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromTGAMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult LoadFromTGAFileNative([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, TGAFlags, TexMetadata*, ScratchImage*, HResult>)vt[75])(szFile, flags, metadata, image);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, TGAFlags, nint, nint, HResult>)vt[75])((nint)szFile, flags, (nint)metadata, (nint)image);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromTGAFileNative(szFile, flags, metadata, image);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = LoadFromTGAFileNative((char*)pszFile, flags, metadata, image);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = LoadFromTGAFileNative(pStr0, flags, metadata, image);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromTGAFileNative(szFile, flags, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = LoadFromTGAFileNative((char*)pszFile, flags, (TexMetadata*)pmetadata, image);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromTGAFileNative(pStr0, flags, (TexMetadata*)pmetadata, image);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromTGAFileNative(szFile, flags, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromTGAFileNative((char*)pszFile, flags, metadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromTGAFileNative(pStr0, flags, metadata, (ScratchImage*)pimage);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromTGAFileNative(szFile, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					fixed (ScratchImage* pimage = &image)
					{
						HResult ret = LoadFromTGAFileNative((char*)pszFile, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromTGAFileNative(pStr0, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToTGAMemoryNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, TGAFlags, Blob*, TexMetadata*, HResult>)vt[76])(image, flags, blob, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, TGAFlags, nint, nint, HResult>)vt[76])((nint)image, flags, (nint)blob, (nint)metadata);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] TexMetadata* metadata)
		{
			HResult ret = SaveToTGAMemoryNative(image, flags, blob, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] TexMetadata* metadata)
		{
			fixed (Image* pimage = &image)
			{
				HResult ret = SaveToTGAMemoryNative((Image*)pimage, flags, blob, metadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] TexMetadata* metadata)
		{
			fixed (Blob* pblob = &blob)
			{
				HResult ret = SaveToTGAMemoryNative(image, flags, (Blob*)pblob, metadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] TexMetadata* metadata)
		{
			fixed (Image* pimage = &image)
			{
				fixed (Blob* pblob = &blob)
				{
					HResult ret = SaveToTGAMemoryNative((Image*)pimage, flags, (Blob*)pblob, metadata);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = SaveToTGAMemoryNative(image, flags, blob, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] ref TexMetadata metadata)
		{
			fixed (Image* pimage = &image)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = SaveToTGAMemoryNative((Image*)pimage, flags, blob, (TexMetadata*)pmetadata);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] ref TexMetadata metadata)
		{
			fixed (Blob* pblob = &blob)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = SaveToTGAMemoryNative(image, flags, (Blob*)pblob, (TexMetadata*)pmetadata);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] ref TexMetadata metadata)
		{
			fixed (Image* pimage = &image)
			{
				fixed (Blob* pblob = &blob)
				{
					fixed (TexMetadata* pmetadata = &metadata)
					{
						HResult ret = SaveToTGAMemoryNative((Image*)pimage, flags, (Blob*)pblob, (TexMetadata*)pmetadata);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToTGAFileNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] TexMetadata* metadata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, TGAFlags, char*, TexMetadata*, HResult>)vt[77])(image, flags, szFile, metadata);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, TGAFlags, nint, nint, HResult>)vt[77])((nint)image, flags, (nint)szFile, (nint)metadata);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] TexMetadata* metadata)
		{
			HResult ret = SaveToTGAFileNative(image, flags, szFile, metadata);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] TexMetadata* metadata)
		{
			fixed (Image* pimage = &image)
			{
				HResult ret = SaveToTGAFileNative((Image*)pimage, flags, szFile, metadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] TexMetadata* metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = SaveToTGAFileNative(image, flags, (char*)pszFile, metadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] TexMetadata* metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = SaveToTGAFileNative(image, flags, pStr0, metadata);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] TexMetadata* metadata)
		{
			fixed (Image* pimage = &image)
			{
				fixed (char* pszFile = &szFile)
				{
					HResult ret = SaveToTGAFileNative((Image*)pimage, flags, (char*)pszFile, metadata);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] TexMetadata* metadata)
		{
			fixed (Image* pimage = &image)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szFile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szFile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = SaveToTGAFileNative((Image*)pimage, flags, pStr0, metadata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = SaveToTGAFileNative(image, flags, szFile, (TexMetadata*)pmetadata);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] ref TexMetadata metadata)
		{
			fixed (Image* pimage = &image)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = SaveToTGAFileNative((Image*)pimage, flags, szFile, (TexMetadata*)pmetadata);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] ref TexMetadata metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = SaveToTGAFileNative(image, flags, (char*)pszFile, (TexMetadata*)pmetadata);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] ref TexMetadata metadata)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = SaveToTGAFileNative(image, flags, pStr0, (TexMetadata*)pmetadata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] ref TexMetadata metadata)
		{
			fixed (Image* pimage = &image)
			{
				fixed (char* pszFile = &szFile)
				{
					fixed (TexMetadata* pmetadata = &metadata)
					{
						HResult ret = SaveToTGAFileNative((Image*)pimage, flags, (char*)pszFile, (TexMetadata*)pmetadata);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToTGAFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToTGAFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "TGA_FLAGS")] TGAFlags flags, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata const *")] ref TexMetadata metadata)
		{
			fixed (Image* pimage = &image)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szFile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szFile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = SaveToTGAFileNative((Image*)pimage, flags, pStr0, (TexMetadata*)pmetadata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult LoadFromPNGFileNative([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, TexMetadata*, ScratchImage*, HResult>)vt[78])(szfile, metadata, image);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, HResult>)vt[78])((nint)szfile, (nint)metadata, (nint)image);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromPNGFileNative(szfile, metadata, image);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (char* pszfile = &szfile)
			{
				HResult ret = LoadFromPNGFileNative((char*)pszfile, metadata, image);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = LoadFromPNGFileNative(pStr0, metadata, image);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromPNGFileNative(szfile, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (char* pszfile = &szfile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = LoadFromPNGFileNative((char*)pszfile, (TexMetadata*)pmetadata, image);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromPNGFileNative(pStr0, (TexMetadata*)pmetadata, image);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromPNGFileNative(szfile, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (char* pszfile = &szfile)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromPNGFileNative((char*)pszfile, metadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromPNGFileNative(pStr0, metadata, (ScratchImage*)pimage);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromPNGFileNative(szfile, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (char* pszfile = &szfile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					fixed (ScratchImage* pimage = &image)
					{
						HResult ret = LoadFromPNGFileNative((char*)pszfile, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromPNGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromPNGFileNative(pStr0, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToPNGFileNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, char*, HResult>)vt[79])(image, szfile);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, HResult>)vt[79])((nint)image, (nint)szfile);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToPNGFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile)
		{
			HResult ret = SaveToPNGFileNative(image, szfile);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToPNGFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile)
		{
			fixed (Image* pimage = &image)
			{
				HResult ret = SaveToPNGFileNative((Image*)pimage, szfile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToPNGFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile)
		{
			fixed (char* pszfile = &szfile)
			{
				HResult ret = SaveToPNGFileNative(image, (char*)pszfile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToPNGFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = SaveToPNGFileNative(image, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToPNGFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile)
		{
			fixed (Image* pimage = &image)
			{
				fixed (char* pszfile = &szfile)
				{
					HResult ret = SaveToPNGFileNative((Image*)pimage, (char*)pszfile);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToPNGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToPNGFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile)
		{
			fixed (Image* pimage = &image)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szfile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szfile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = SaveToPNGFileNative((Image*)pimage, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult LoadFromJPEGFileNative([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, TexMetadata*, ScratchImage*, HResult>)vt[80])(szfile, metadata, image);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, HResult>)vt[80])((nint)szfile, (nint)metadata, (nint)image);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromJPEGFileNative(szfile, metadata, image);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (char* pszfile = &szfile)
			{
				HResult ret = LoadFromJPEGFileNative((char*)pszfile, metadata, image);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = LoadFromJPEGFileNative(pStr0, metadata, image);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromJPEGFileNative(szfile, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (char* pszfile = &szfile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = LoadFromJPEGFileNative((char*)pszfile, (TexMetadata*)pmetadata, image);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromJPEGFileNative(pStr0, (TexMetadata*)pmetadata, image);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromJPEGFileNative(szfile, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (char* pszfile = &szfile)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromJPEGFileNative((char*)pszfile, metadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromJPEGFileNative(pStr0, metadata, (ScratchImage*)pimage);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromJPEGFileNative(szfile, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (char* pszfile = &szfile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					fixed (ScratchImage* pimage = &image)
					{
						HResult ret = LoadFromJPEGFileNative((char*)pszfile, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromJPEGFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromJPEGFileNative(pStr0, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToJPEGFileNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, char*, HResult>)vt[81])(image, szfile);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, HResult>)vt[81])((nint)image, (nint)szfile);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToJPEGFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile)
		{
			HResult ret = SaveToJPEGFileNative(image, szfile);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToJPEGFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile)
		{
			fixed (Image* pimage = &image)
			{
				HResult ret = SaveToJPEGFileNative((Image*)pimage, szfile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToJPEGFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile)
		{
			fixed (char* pszfile = &szfile)
			{
				HResult ret = SaveToJPEGFileNative(image, (char*)pszfile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToJPEGFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = SaveToJPEGFileNative(image, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToJPEGFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile)
		{
			fixed (Image* pimage = &image)
			{
				fixed (char* pszfile = &szfile)
				{
					HResult ret = SaveToJPEGFileNative((Image*)pimage, (char*)pszfile);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToJPEGFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToJPEGFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile)
		{
			fixed (Image* pimage = &image)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szfile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szfile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = SaveToJPEGFileNative((Image*)pimage, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult LoadFromEXRFileNative([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, TexMetadata*, ScratchImage*, HResult>)vt[82])(szfile, metadata, image);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, HResult>)vt[82])((nint)szfile, (nint)metadata, (nint)image);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromEXRFileNative(szfile, metadata, image);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (char* pszfile = &szfile)
			{
				HResult ret = LoadFromEXRFileNative((char*)pszfile, metadata, image);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = LoadFromEXRFileNative(pStr0, metadata, image);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromEXRFileNative(szfile, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (char* pszfile = &szfile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = LoadFromEXRFileNative((char*)pszfile, (TexMetadata*)pmetadata, image);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromEXRFileNative(pStr0, (TexMetadata*)pmetadata, image);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromEXRFileNative(szfile, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (char* pszfile = &szfile)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromEXRFileNative((char*)pszfile, metadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromEXRFileNative(pStr0, metadata, (ScratchImage*)pimage);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromEXRFileNative(szfile, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (char* pszfile = &szfile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					fixed (ScratchImage* pimage = &image)
					{
						HResult ret = LoadFromEXRFileNative((char*)pszfile, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromEXRFile([NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromEXRFileNative(pStr0, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToEXRFileNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, char*, HResult>)vt[83])(image, szfile);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, HResult>)vt[83])((nint)image, (nint)szfile);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToEXRFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile)
		{
			HResult ret = SaveToEXRFileNative(image, szfile);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToEXRFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szfile)
		{
			fixed (Image* pimage = &image)
			{
				HResult ret = SaveToEXRFileNative((Image*)pimage, szfile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToEXRFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile)
		{
			fixed (char* pszfile = &szfile)
			{
				HResult ret = SaveToEXRFileNative(image, (char*)pszfile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToEXRFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = SaveToEXRFileNative(image, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToEXRFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szfile)
		{
			fixed (Image* pimage = &image)
			{
				fixed (char* pszfile = &szfile)
				{
					HResult ret = SaveToEXRFileNative((Image*)pimage, (char*)pszfile);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToEXRFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToEXRFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "szfile")] [NativeName(NativeNameType.Type, "wchar const *")] string szfile)
		{
			fixed (Image* pimage = &image)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szfile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szfile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szfile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = SaveToEXRFileNative((Image*)pimage, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFromWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult LoadFromWICMemoryNative([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ulong, WICFlags, TexMetadata*, ScratchImage*, delegate*<void*, void>, HResult>)vt[84])(pSource, size, flags, metadata, image, (delegate*<void*, void>)Utils.GetFunctionPointerForDelegate(getMQR));
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, ulong, WICFlags, nint, nint, nint, HResult>)vt[84])((nint)pSource, size, flags, (nint)metadata, (nint)image, (nint)Utils.GetFunctionPointerForDelegate(getMQR));
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			HResult ret = LoadFromWICMemoryNative(pSource, size, flags, metadata, image, getMQR);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			HResult ret = LoadFromWICMemoryNative(pSource, size, flags, metadata, image, getMQR);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromWICMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata, image, getMQR);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromWICMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata, image, getMQR);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromWICMemoryNative(pSource, size, flags, metadata, (ScratchImage*)pimage, getMQR);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromWICMemoryNative(pSource, size, flags, metadata, (ScratchImage*)pimage, getMQR);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromWICMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage, getMQR);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICMemory([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromWICMemoryNative(pSource, size, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage, getMQR);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult LoadFromWICFileNative([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, WICFlags, TexMetadata*, ScratchImage*, delegate*<void*, void>, HResult>)vt[85])(szFile, flags, metadata, image, (delegate*<void*, void>)Utils.GetFunctionPointerForDelegate(getMQR));
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, WICFlags, nint, nint, nint, HResult>)vt[85])((nint)szFile, flags, (nint)metadata, (nint)image, (nint)Utils.GetFunctionPointerForDelegate(getMQR));
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			HResult ret = LoadFromWICFileNative(szFile, flags, metadata, image, getMQR);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = LoadFromWICFileNative((char*)pszFile, flags, metadata, image, getMQR);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = LoadFromWICFileNative(pStr0, flags, metadata, image, getMQR);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromWICFileNative(szFile, flags, (TexMetadata*)pmetadata, image, getMQR);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = LoadFromWICFileNative((char*)pszFile, flags, (TexMetadata*)pmetadata, image, getMQR);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromWICFileNative(pStr0, flags, (TexMetadata*)pmetadata, image, getMQR);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromWICFileNative(szFile, flags, metadata, (ScratchImage*)pimage, getMQR);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromWICFileNative((char*)pszFile, flags, metadata, (ScratchImage*)pimage, getMQR);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromWICFileNative(pStr0, flags, metadata, (ScratchImage*)pimage, getMQR);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromWICFileNative(szFile, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage, getMQR);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					fixed (ScratchImage* pimage = &image)
					{
						HResult ret = LoadFromWICFileNative((char*)pszFile, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage, getMQR);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromWICFile([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image, [NativeName(NativeNameType.Param, "getMQR")] [NativeName(NativeNameType.Type, "GetMQR")] GetMQR getMQR)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromWICFileNative(pStr0, flags, (TexMetadata*)pmetadata, (ScratchImage*)pimage, getMQR);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToWICMemoryNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, WICFlags, Guid, Blob*, Guid*, delegate*<void*, void>, HResult>)vt[86])(image, flags, guidContainerFormat, blob, targetFormat, (delegate*<void*, void>)Utils.GetFunctionPointerForDelegate(customProps));
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, WICFlags, Guid, nint, nint, nint, HResult>)vt[86])((nint)image, flags, guidContainerFormat, (nint)blob, (nint)targetFormat, (nint)Utils.GetFunctionPointerForDelegate(customProps));
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			HResult ret = SaveToWICMemoryNative(image, flags, guidContainerFormat, blob, targetFormat, customProps);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimage = &image)
			{
				HResult ret = SaveToWICMemoryNative((Image*)pimage, flags, guidContainerFormat, blob, targetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Blob* pblob = &blob)
			{
				HResult ret = SaveToWICMemoryNative(image, flags, guidContainerFormat, (Blob*)pblob, targetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimage = &image)
			{
				fixed (Blob* pblob = &blob)
				{
					HResult ret = SaveToWICMemoryNative((Image*)pimage, flags, guidContainerFormat, (Blob*)pblob, targetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				HResult ret = SaveToWICMemoryNative(image, flags, guidContainerFormat, blob, (Guid*)ptargetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimage = &image)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICMemoryNative((Image*)pimage, flags, guidContainerFormat, blob, (Guid*)ptargetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Blob* pblob = &blob)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICMemoryNative(image, flags, guidContainerFormat, (Blob*)pblob, (Guid*)ptargetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimage = &image)
			{
				fixed (Blob* pblob = &blob)
				{
					fixed (Guid* ptargetFormat = &targetFormat)
					{
						HResult ret = SaveToWICMemoryNative((Image*)pimage, flags, guidContainerFormat, (Blob*)pblob, (Guid*)ptargetFormat, customProps);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToWICMemory2Native([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, ulong, WICFlags, Guid, Blob*, Guid*, delegate*<void*, void>, HResult>)vt[87])(images, nimages, flags, guidContainerFormat, blob, targetFormat, (delegate*<void*, void>)Utils.GetFunctionPointerForDelegate(customProps));
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, ulong, WICFlags, Guid, nint, nint, nint, HResult>)vt[87])((nint)images, nimages, flags, guidContainerFormat, (nint)blob, (nint)targetFormat, (nint)Utils.GetFunctionPointerForDelegate(customProps));
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			HResult ret = SaveToWICMemory2Native(images, nimages, flags, guidContainerFormat, blob, targetFormat, customProps);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				HResult ret = SaveToWICMemory2Native((Image*)pimages, nimages, flags, guidContainerFormat, blob, targetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			HResult ret = SaveToWICMemory2Native(images, nimages, flags, guidContainerFormat, blob, targetFormat, customProps);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				HResult ret = SaveToWICMemory2Native((Image*)pimages, nimages, flags, guidContainerFormat, blob, targetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Blob* pblob = &blob)
			{
				HResult ret = SaveToWICMemory2Native(images, nimages, flags, guidContainerFormat, (Blob*)pblob, targetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (Blob* pblob = &blob)
				{
					HResult ret = SaveToWICMemory2Native((Image*)pimages, nimages, flags, guidContainerFormat, (Blob*)pblob, targetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Blob* pblob = &blob)
			{
				HResult ret = SaveToWICMemory2Native(images, nimages, flags, guidContainerFormat, (Blob*)pblob, targetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (Blob* pblob = &blob)
				{
					HResult ret = SaveToWICMemory2Native((Image*)pimages, nimages, flags, guidContainerFormat, (Blob*)pblob, targetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				HResult ret = SaveToWICMemory2Native(images, nimages, flags, guidContainerFormat, blob, (Guid*)ptargetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICMemory2Native((Image*)pimages, nimages, flags, guidContainerFormat, blob, (Guid*)ptargetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				HResult ret = SaveToWICMemory2Native(images, nimages, flags, guidContainerFormat, blob, (Guid*)ptargetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] Blob* blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICMemory2Native((Image*)pimages, nimages, flags, guidContainerFormat, blob, (Guid*)ptargetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Blob* pblob = &blob)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICMemory2Native(images, nimages, flags, guidContainerFormat, (Blob*)pblob, (Guid*)ptargetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (Blob* pblob = &blob)
				{
					fixed (Guid* ptargetFormat = &targetFormat)
					{
						HResult ret = SaveToWICMemory2Native((Image*)pimages, nimages, flags, guidContainerFormat, (Blob*)pblob, (Guid*)ptargetFormat, customProps);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Blob* pblob = &blob)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICMemory2Native(images, nimages, flags, guidContainerFormat, (Blob*)pblob, (Guid*)ptargetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICMemory2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "BlobT *")] ref Blob blob, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (Blob* pblob = &blob)
				{
					fixed (Guid* ptargetFormat = &targetFormat)
					{
						HResult ret = SaveToWICMemory2Native((Image*)pimages, nimages, flags, guidContainerFormat, (Blob*)pblob, (Guid*)ptargetFormat, customProps);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToWICFileNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, WICFlags, Guid, char*, Guid*, delegate*<void*, void>, HResult>)vt[88])(image, flags, guidContainerFormat, szFile, targetFormat, (delegate*<void*, void>)Utils.GetFunctionPointerForDelegate(customProps));
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, WICFlags, Guid, nint, nint, nint, HResult>)vt[88])((nint)image, flags, guidContainerFormat, (nint)szFile, (nint)targetFormat, (nint)Utils.GetFunctionPointerForDelegate(customProps));
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			HResult ret = SaveToWICFileNative(image, flags, guidContainerFormat, szFile, targetFormat, customProps);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimage = &image)
			{
				HResult ret = SaveToWICFileNative((Image*)pimage, flags, guidContainerFormat, szFile, targetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = SaveToWICFileNative(image, flags, guidContainerFormat, (char*)pszFile, targetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = SaveToWICFileNative(image, flags, guidContainerFormat, pStr0, targetFormat, customProps);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimage = &image)
			{
				fixed (char* pszFile = &szFile)
				{
					HResult ret = SaveToWICFileNative((Image*)pimage, flags, guidContainerFormat, (char*)pszFile, targetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimage = &image)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szFile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szFile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = SaveToWICFileNative((Image*)pimage, flags, guidContainerFormat, pStr0, targetFormat, customProps);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				HResult ret = SaveToWICFileNative(image, flags, guidContainerFormat, szFile, (Guid*)ptargetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimage = &image)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICFileNative((Image*)pimage, flags, guidContainerFormat, szFile, (Guid*)ptargetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICFileNative(image, flags, guidContainerFormat, (char*)pszFile, (Guid*)ptargetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] Image* image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				HResult ret = SaveToWICFileNative(image, flags, guidContainerFormat, pStr0, (Guid*)ptargetFormat, customProps);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimage = &image)
			{
				fixed (char* pszFile = &szFile)
				{
					fixed (Guid* ptargetFormat = &targetFormat)
					{
						HResult ret = SaveToWICFileNative((Image*)pimage, flags, guidContainerFormat, (char*)pszFile, (Guid*)ptargetFormat, customProps);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image const&")] ref Image image, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimage = &image)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szFile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szFile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICFileNative((Image*)pimage, flags, guidContainerFormat, pStr0, (Guid*)ptargetFormat, customProps);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult SaveToWICFile2Native([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image*, ulong, WICFlags, Guid, char*, Guid*, delegate*<void*, void>, HResult>)vt[89])(images, nimages, flags, guidContainerFormat, szFile, targetFormat, (delegate*<void*, void>)Utils.GetFunctionPointerForDelegate(customProps));
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, ulong, WICFlags, Guid, nint, nint, nint, HResult>)vt[89])((nint)images, nimages, flags, guidContainerFormat, (nint)szFile, (nint)targetFormat, (nint)Utils.GetFunctionPointerForDelegate(customProps));
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			HResult ret = SaveToWICFile2Native(images, nimages, flags, guidContainerFormat, szFile, targetFormat, customProps);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				HResult ret = SaveToWICFile2Native((Image*)pimages, nimages, flags, guidContainerFormat, szFile, targetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			HResult ret = SaveToWICFile2Native(images, nimages, flags, guidContainerFormat, szFile, targetFormat, customProps);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				HResult ret = SaveToWICFile2Native((Image*)pimages, nimages, flags, guidContainerFormat, szFile, targetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = SaveToWICFile2Native(images, nimages, flags, guidContainerFormat, (char*)pszFile, targetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = SaveToWICFile2Native(images, nimages, flags, guidContainerFormat, pStr0, targetFormat, customProps);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (char* pszFile = &szFile)
				{
					HResult ret = SaveToWICFile2Native((Image*)pimages, nimages, flags, guidContainerFormat, (char*)pszFile, targetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szFile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szFile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = SaveToWICFile2Native((Image*)pimages, nimages, flags, guidContainerFormat, pStr0, targetFormat, customProps);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = SaveToWICFile2Native(images, nimages, flags, guidContainerFormat, (char*)pszFile, targetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = SaveToWICFile2Native(images, nimages, flags, guidContainerFormat, pStr0, targetFormat, customProps);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (char* pszFile = &szFile)
				{
					HResult ret = SaveToWICFile2Native((Image*)pimages, nimages, flags, guidContainerFormat, (char*)pszFile, targetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] Guid* targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szFile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szFile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = SaveToWICFile2Native((Image*)pimages, nimages, flags, guidContainerFormat, pStr0, targetFormat, customProps);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				HResult ret = SaveToWICFile2Native(images, nimages, flags, guidContainerFormat, szFile, (Guid*)ptargetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICFile2Native((Image*)pimages, nimages, flags, guidContainerFormat, szFile, (Guid*)ptargetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				HResult ret = SaveToWICFile2Native(images, nimages, flags, guidContainerFormat, szFile, (Guid*)ptargetFormat, customProps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICFile2Native((Image*)pimages, nimages, flags, guidContainerFormat, szFile, (Guid*)ptargetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICFile2Native(images, nimages, flags, guidContainerFormat, (char*)pszFile, (Guid*)ptargetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				HResult ret = SaveToWICFile2Native(images, nimages, flags, guidContainerFormat, pStr0, (Guid*)ptargetFormat, customProps);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (char* pszFile = &szFile)
				{
					fixed (Guid* ptargetFormat = &targetFormat)
					{
						HResult ret = SaveToWICFile2Native((Image*)pimages, nimages, flags, guidContainerFormat, (char*)pszFile, (Guid*)ptargetFormat, customProps);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] ulong nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szFile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szFile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICFile2Native((Image*)pimages, nimages, flags, guidContainerFormat, pStr0, (Guid*)ptargetFormat, customProps);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICFile2Native(images, nimages, flags, guidContainerFormat, (char*)pszFile, (Guid*)ptargetFormat, customProps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] Image* images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				HResult ret = SaveToWICFile2Native(images, nimages, flags, guidContainerFormat, pStr0, (Guid*)ptargetFormat, customProps);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (char* pszFile = &szFile)
				{
					fixed (Guid* ptargetFormat = &targetFormat)
					{
						HResult ret = SaveToWICFile2Native((Image*)pimages, nimages, flags, guidContainerFormat, (char*)pszFile, (Guid*)ptargetFormat, customProps);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SaveToWICFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult SaveToWICFile2([NativeName(NativeNameType.Param, "images")] [NativeName(NativeNameType.Type, "Image const *")] ref Image images, [NativeName(NativeNameType.Param, "nimages")] [NativeName(NativeNameType.Type, "size_t")] nuint nimages, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "WIC_FLAGS")] WICFlags flags, [NativeName(NativeNameType.Param, "guidContainerFormat")] [NativeName(NativeNameType.Type, "GUID")] Guid guidContainerFormat, [NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "targetFormat")] [NativeName(NativeNameType.Type, "GUID const *")] ref Guid targetFormat, [NativeName(NativeNameType.Param, "customProps")] [NativeName(NativeNameType.Type, "SetCustomProps")] SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (szFile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(szFile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
					pStr0[pStrOffset0] = '\0';
				}
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					HResult ret = SaveToWICFile2Native((Image*)pimages, nimages, flags, guidContainerFormat, pStr0, (Guid*)ptargetFormat, customProps);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Compatability helpers<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFromTGAMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult LoadFromTGAMemory2Native([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ulong, TexMetadata*, ScratchImage*, HResult>)vt[90])(pSource, size, metadata, image);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, ulong, nint, nint, HResult>)vt[90])((nint)pSource, size, (nint)metadata, (nint)image);
			#endif
		}

		/// <summary>/// Compatability helpers<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory2([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromTGAMemory2Native(pSource, size, metadata, image);
			return ret;
		}

		/// <summary>/// Compatability helpers<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory2([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromTGAMemory2Native(pSource, size, metadata, image);
			return ret;
		}

		/// <summary>/// Compatability helpers<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory2([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromTGAMemory2Native(pSource, size, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// Compatability helpers<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory2([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromTGAMemory2Native(pSource, size, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// Compatability helpers<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory2([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromTGAMemory2Native(pSource, size, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// Compatability helpers<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory2([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromTGAMemory2Native(pSource, size, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// Compatability helpers<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory2([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromTGAMemory2Native(pSource, size, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// Compatability helpers<br/>/// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAMemory2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAMemory2([NativeName(NativeNameType.Param, "pSource")] [NativeName(NativeNameType.Type, "void const *")] void* pSource, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromTGAMemory2Native(pSource, size, (TexMetadata*)pmetadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		internal static HResult LoadFromTGAFile2Native([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, TexMetadata*, ScratchImage*, HResult>)vt[91])(szFile, metadata, image);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, HResult>)vt[91])((nint)szFile, (nint)metadata, (nint)image);
			#endif
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			HResult ret = LoadFromTGAFile2Native(szFile, metadata, image);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (char* pszFile = &szFile)
			{
				HResult ret = LoadFromTGAFile2Native((char*)pszFile, metadata, image);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = LoadFromTGAFile2Native(pStr0, metadata, image);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromTGAFile2Native(szFile, (TexMetadata*)pmetadata, image);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					HResult ret = LoadFromTGAFile2Native((char*)pszFile, (TexMetadata*)pmetadata, image);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] ref TexMetadata metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ScratchImage* image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (TexMetadata* pmetadata = &metadata)
			{
				HResult ret = LoadFromTGAFile2Native(pStr0, (TexMetadata*)pmetadata, image);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] char* szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromTGAFile2Native(szFile, metadata, (ScratchImage*)pimage);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] ref char szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (ScratchImage* pimage = &image)
				{
					HResult ret = LoadFromTGAFile2Native((char*)pszFile, metadata, (ScratchImage*)pimage);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "LoadFromTGAFile2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult LoadFromTGAFile2([NativeName(NativeNameType.Param, "szFile")] [NativeName(NativeNameType.Type, "wchar const *")] string szFile, [NativeName(NativeNameType.Param, "metadata")] [NativeName(NativeNameType.Type, "TexMetadata *")] TexMetadata* metadata, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "ScratchImageT *")] ref ScratchImage image)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (szFile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(szFile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = (char*)Utils.Alloc<byte>(pStrSize0 + 2);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 2];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(szFile, pStr0, pStrSize0) / 2;
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ScratchImage* pimage = &image)
			{
				HResult ret = LoadFromTGAFile2Native(pStr0, metadata, (ScratchImage*)pimage);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}
	}
}
