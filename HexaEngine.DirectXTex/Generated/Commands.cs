// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Silk.NET.Direct3D12;
using Silk.NET.Direct3D11;
using Silk.NET.Direct2D;

namespace HexaEngine.DirectXTex
{
	public unsafe partial class DirectXTex
	{
		internal const string LibName = "DirectXTex";

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsValid")]
		public static extern bool IsValid(int fmt);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsCompressed")]
		public static extern bool IsCompressed(int fmt);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsPacked")]
		public static extern bool IsPacked(int fmt);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsVideo")]
		public static extern bool IsVideo(int fmt);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsPlanar")]
		public static extern bool IsPlanar(int fmt);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsPalettized")]
		public static extern bool IsPalettized(int fmt);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsDepthStencil")]
		public static extern bool IsDepthStencil(int fmt);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsSRGB")]
		public static extern bool IsSRGB(int fmt);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsTypeless")]
		public static extern bool IsTypeless(int fmt, bool partialTypeless);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "HasAlpha")]
		public static extern bool HasAlpha(int fmt);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "BitsPerPixel")]
		public static extern nuint BitsPerPixel(int fmt);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "BitsPerColor")]
		public static extern nuint BitsPerColor(int fmt);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FormatDataType")]
		public static extern FormatType FormatDataType(int fmt);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ComputePitch")]
		public static extern int ComputePitch(int fmt, nuint width, nuint height, nuint* rowPitch, nuint* slicePitch, CPFlags flags);

		public static int ComputePitch(int fmt, nuint width, nuint height, ref nuint rowPitch, nuint* slicePitch, CPFlags flags)
		{
			fixed (nuint* prowPitch = &rowPitch)
			{
				int ret = ComputePitch(fmt, width, height, prowPitch, slicePitch, flags);
				return ret;
			}
		}

		public static int ComputePitch(int fmt, nuint width, nuint height, nuint* rowPitch, ref nuint slicePitch, CPFlags flags)
		{
			fixed (nuint* pslicePitch = &slicePitch)
			{
				int ret = ComputePitch(fmt, width, height, rowPitch, pslicePitch, flags);
				return ret;
			}
		}

		public static int ComputePitch(int fmt, nuint width, nuint height, ref nuint rowPitch, ref nuint slicePitch, CPFlags flags)
		{
			fixed (nuint* prowPitch = &rowPitch)
			{
				fixed (nuint* pslicePitch = &slicePitch)
				{
					int ret = ComputePitch(fmt, width, height, prowPitch, pslicePitch, flags);
					return ret;
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ComputeScanlines")]
		public static extern nuint ComputeScanlines(int fmt, nuint height);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MakeSRGB")]
		public static extern int MakeSRGB(int fmt);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MakeTypeless")]
		public static extern int MakeTypeless(int fmt);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MakeTypelessUNORM")]
		public static extern int MakeTypelessUNORM(int fmt);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MakeTypelessFLOAT")]
		public static extern int MakeTypelessFLOA(int fmt);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetMetadataFromDDSMemory")]
		public static extern int GetMetadataFromDDSMemory(void* source, nuint size, DDSFlags flags, TexMetadata* metadata);

		public static int GetMetadataFromDDSMemory(void* source, nuint size, DDSFlags flags, ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromDDSMemory(source, size, flags, pmetadata);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetMetadataFromDDSFile")]
		public static extern int GetMetadataFromDDSFile(char* szFile, DDSFlags flags, TexMetadata* metadata);

		public static int GetMetadataFromDDSFile(ref char szFile, DDSFlags flags, TexMetadata* metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = GetMetadataFromDDSFile(pszFile, flags, metadata);
				return ret;
			}
		}

		public static int GetMetadataFromDDSFile(string szFile, DDSFlags flags, TexMetadata* metadata)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = GetMetadataFromDDSFile(pStr0, flags, metadata);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int GetMetadataFromDDSFile(char* szFile, DDSFlags flags, ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromDDSFile(szFile, flags, pmetadata);
				return ret;
			}
		}

		public static int GetMetadataFromDDSFile(ref char szFile, DDSFlags flags, ref TexMetadata metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					int ret = GetMetadataFromDDSFile(pszFile, flags, pmetadata);
					return ret;
				}
			}
		}

		public static int GetMetadataFromDDSFile(string szFile, DDSFlags flags, ref TexMetadata metadata)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromDDSFile(pStr0, flags, pmetadata);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetMetadataFromHDRMemory")]
		public static extern int GetMetadataFromHDRMemory(void* source, nuint size, TexMetadata* metadata);

		public static int GetMetadataFromHDRMemory(void* source, nuint size, ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromHDRMemory(source, size, pmetadata);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetMetadataFromHDRFile")]
		public static extern int GetMetadataFromHDRFile(char* szFile, TexMetadata* metadata);

		public static int GetMetadataFromHDRFile(ref char szFile, TexMetadata* metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = GetMetadataFromHDRFile(pszFile, metadata);
				return ret;
			}
		}

		public static int GetMetadataFromHDRFile(string szFile, TexMetadata* metadata)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = GetMetadataFromHDRFile(pStr0, metadata);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int GetMetadataFromHDRFile(char* szFile, ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromHDRFile(szFile, pmetadata);
				return ret;
			}
		}

		public static int GetMetadataFromHDRFile(ref char szFile, ref TexMetadata metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					int ret = GetMetadataFromHDRFile(pszFile, pmetadata);
					return ret;
				}
			}
		}

		public static int GetMetadataFromHDRFile(string szFile, ref TexMetadata metadata)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromHDRFile(pStr0, pmetadata);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetMetadataFromTGAMemory")]
		public static extern int GetMetadataFromTGAMemory(void* source, nuint size, TGAFlags flags, TexMetadata* metadata);

		public static int GetMetadataFromTGAMemory(void* source, nuint size, TGAFlags flags, ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromTGAMemory(source, size, flags, pmetadata);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetMetadataFromTGAFile")]
		public static extern int GetMetadataFromTGAFile(char* szFile, TGAFlags flags, TexMetadata* metadata);

		public static int GetMetadataFromTGAFile(ref char szFile, TGAFlags flags, TexMetadata* metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = GetMetadataFromTGAFile(pszFile, flags, metadata);
				return ret;
			}
		}

		public static int GetMetadataFromTGAFile(string szFile, TGAFlags flags, TexMetadata* metadata)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = GetMetadataFromTGAFile(pStr0, flags, metadata);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int GetMetadataFromTGAFile(char* szFile, TGAFlags flags, ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromTGAFile(szFile, flags, pmetadata);
				return ret;
			}
		}

		public static int GetMetadataFromTGAFile(ref char szFile, TGAFlags flags, ref TexMetadata metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					int ret = GetMetadataFromTGAFile(pszFile, flags, pmetadata);
					return ret;
				}
			}
		}

		public static int GetMetadataFromTGAFile(string szFile, TGAFlags flags, ref TexMetadata metadata)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromTGAFile(pStr0, flags, pmetadata);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetMetadataFromWICMemory")]
		public static extern int GetMetadataFromWICMemory(void* source, nuint size, WICFlags flags, TexMetadata* metadata);

		public static int GetMetadataFromWICMemory(void* source, nuint size, WICFlags flags, ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromWICMemory(source, size, flags, pmetadata);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetMetadataFromWICFile")]
		public static extern int GetMetadataFromWICFile(char* szFile, WICFlags flags, TexMetadata* metadata);

		public static int GetMetadataFromWICFile(ref char szFile, WICFlags flags, TexMetadata* metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = GetMetadataFromWICFile(pszFile, flags, metadata);
				return ret;
			}
		}

		public static int GetMetadataFromWICFile(string szFile, WICFlags flags, TexMetadata* metadata)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = GetMetadataFromWICFile(pStr0, flags, metadata);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int GetMetadataFromWICFile(char* szFile, WICFlags flags, ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromWICFile(szFile, flags, pmetadata);
				return ret;
			}
		}

		public static int GetMetadataFromWICFile(ref char szFile, WICFlags flags, ref TexMetadata metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					int ret = GetMetadataFromWICFile(pszFile, flags, pmetadata);
					return ret;
				}
			}
		}

		public static int GetMetadataFromWICFile(string szFile, WICFlags flags, ref TexMetadata metadata)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromWICFile(pStr0, flags, pmetadata);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		/// <summary>
		/// Compatability helpers
		/// </summary>
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetMetadataFromTGAMemory2")]
		public static extern int GetMetadataFromTGAMemory2(void* source, nuint size, TexMetadata* metadata);

		/// <summary>
		/// Compatability helpers
		/// </summary>
		public static int GetMetadataFromTGAMemory2(void* source, nuint size, ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromTGAMemory2(source, size, pmetadata);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetMetadataFromTGAFile2")]
		public static extern int GetMetadataFromTGAFile2(char* szFile, TexMetadata* metadata);

		public static int GetMetadataFromTGAFile2(ref char szFile, TexMetadata* metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = GetMetadataFromTGAFile2(pszFile, metadata);
				return ret;
			}
		}

		public static int GetMetadataFromTGAFile2(string szFile, TexMetadata* metadata)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = GetMetadataFromTGAFile2(pStr0, metadata);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int GetMetadataFromTGAFile2(char* szFile, ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromTGAFile2(szFile, pmetadata);
				return ret;
			}
		}

		public static int GetMetadataFromTGAFile2(ref char szFile, ref TexMetadata metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					int ret = GetMetadataFromTGAFile2(pszFile, pmetadata);
					return ret;
				}
			}
		}

		public static int GetMetadataFromTGAFile2(string szFile, ref TexMetadata metadata)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = GetMetadataFromTGAFile2(pStr0, pmetadata);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ComputeIndex")]
		public static extern nuint ComputeIndex(TexMetadata metadata, nuint mip, nuint item, nuint slice);

		/// <summary>
		/// Returns size_t(-1) to indicate an out-of-range error
		/// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsCubemap")]
		public static extern bool IsCubemap(TexMetadata metadata);

		/// <summary>
		/// Helper for miscFlags
		/// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsPMAlpha")]
		public static extern bool IsPMAlpha(TexMetadata metadata);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SetAlphaMode")]
		public static extern void SetAlphaMode(TexMetadata* metadata, TexAlphaMode mode);

		public static void SetAlphaMode(ref TexMetadata metadata, TexAlphaMode mode)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				SetAlphaMode(pmetadata, mode);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetAlphaMode")]
		public static extern TexAlphaMode GetAlphaMode(TexMetadata metadata);

		/// <summary>
		/// Helpers for miscFlags2
		/// </summary>
		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsVolumemap")]
		public static extern bool IsVolumemap(TexMetadata metadata);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CreateScratchImage")]
		public static extern ScratchImage CreateScratchImage();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Initialize")]
		public static extern int Initialize(ScratchImage img, TexMetadata mdata, CPFlags flags);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Initialize1D")]
		public static extern int Initialize1D(ScratchImage img, int fmt, nuint length, nuint arraySize, nuint mipLevels, CPFlags flags);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Initialize2D")]
		public static extern int Initialize2D(ScratchImage img, int fmt, nuint width, nuint height, nuint arraySize, nuint mipLevels, CPFlags flags);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Initialize3D")]
		public static extern int Initialize3D(ScratchImage img, int fmt, nuint width, nuint height, nuint depth, nuint mipLevels, CPFlags flags);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "InitializeCube")]
		public static extern int InitializeCube(ScratchImage img, int fmt, nuint width, nuint height, nuint nCubes, nuint mipLevels, CPFlags flags);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "InitializeFromImage")]
		public static extern int InitializeFromImage(ScratchImage img, Image srcImage, bool allow1D, CPFlags flags);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "InitializeArrayFromImages")]
		public static extern int InitializeArrayFromImages(ScratchImage img, Image* images, nuint nImages, bool allow1D, CPFlags flags);

		public static int InitializeArrayFromImages(ScratchImage img, ref Image images, nuint nImages, bool allow1D, CPFlags flags)
		{
			fixed (Image* pimages = &images)
			{
				int ret = InitializeArrayFromImages(img, pimages, nImages, allow1D, flags);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "InitializeCubeFromImages")]
		public static extern int InitializeCubeFromImages(ScratchImage img, Image* images, nuint nImages, CPFlags flags);

		public static int InitializeCubeFromImages(ScratchImage img, ref Image images, nuint nImages, CPFlags flags)
		{
			fixed (Image* pimages = &images)
			{
				int ret = InitializeCubeFromImages(img, pimages, nImages, flags);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Initialize3DFromImages")]
		public static extern int Initialize3DFromImages(ScratchImage img, Image* images, nuint depth, CPFlags flags);

		public static int Initialize3DFromImages(ScratchImage img, ref Image images, nuint depth, CPFlags flags)
		{
			fixed (Image* pimages = &images)
			{
				int ret = Initialize3DFromImages(img, pimages, depth, flags);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ScratchImageRelease")]
		public static extern void ScratchImageRelease(ScratchImage img);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "OverrideFormat")]
		public static extern bool OverrideFormat(ScratchImage img, int f);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetMetadata")]
		public static extern TexMetadata GetMetadata(ScratchImage img);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetImage")]
		public static extern Image GetImage(ScratchImage img, nuint mip, nuint item, nuint slice);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetImages")]
		public static extern Image* GetImages(ScratchImage img);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetImageCount")]
		public static extern nuint GetImageCount(ScratchImage img);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetPixels")]
		public static extern byte* GetPixels(ScratchImage img);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetPixelsSize")]
		public static extern nuint GetPixelsSize(ScratchImage img);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsAlphaAllOpaque")]
		public static extern bool IsAlphaAllOpaque(ScratchImage img);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CreateBlob")]
		public static extern Blob CreateBlob();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "BlobInitialize")]
		public static extern int BlobInitialize(Blob blob, nuint size);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "BlobRelease")]
		public static extern void BlobRelease(Blob blob);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "BlobGetBufferPointer")]
		public static extern void* BlobGetBufferPointer(Blob blob);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "BlobGetBufferSize")]
		public static extern nuint BlobGetBufferSize(Blob blob);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "BlobResize")]
		public static extern int BlobResize(Blob blob, nuint size);

		/// <summary>
		/// Reallocate for a new size
		/// </summary>
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "BlobTrim")]
		public static extern int BlobTrim(Blob blob, nuint size);

		/// <summary>
		/// DDS operations
		/// </summary>
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "LoadFromDDSMemory")]
		public static extern int LoadFromDDSMemory(void* source, nuint size, DDSFlags flags, TexMetadata* metadata, ScratchImage image);

		/// <summary>
		/// DDS operations
		/// </summary>
		public static int LoadFromDDSMemory(void* source, nuint size, DDSFlags flags, ref TexMetadata metadata, ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromDDSMemory(source, size, flags, pmetadata, image);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "LoadFromDDSFile")]
		public static extern int LoadFromDDSFile(char* szFile, DDSFlags flags, TexMetadata* metadata, ScratchImage image);

		public static int LoadFromDDSFile(ref char szFile, DDSFlags flags, TexMetadata* metadata, ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = LoadFromDDSFile(pszFile, flags, metadata, image);
				return ret;
			}
		}

		public static int LoadFromDDSFile(string szFile, DDSFlags flags, TexMetadata* metadata, ScratchImage image)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = LoadFromDDSFile(pStr0, flags, metadata, image);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int LoadFromDDSFile(char* szFile, DDSFlags flags, ref TexMetadata metadata, ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromDDSFile(szFile, flags, pmetadata, image);
				return ret;
			}
		}

		public static int LoadFromDDSFile(ref char szFile, DDSFlags flags, ref TexMetadata metadata, ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					int ret = LoadFromDDSFile(pszFile, flags, pmetadata, image);
					return ret;
				}
			}
		}

		public static int LoadFromDDSFile(string szFile, DDSFlags flags, ref TexMetadata metadata, ScratchImage image)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromDDSFile(pStr0, flags, pmetadata, image);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SaveToDDSMemory")]
		public static extern int SaveToDDSMemory(Image image, DDSFlags flags, Blob blob);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SaveToDDSMemory2")]
		public static extern int SaveToDDSMemory2(Image* images, nuint nimages, TexMetadata metadata, DDSFlags flags, Blob blob);

		public static int SaveToDDSMemory2(ref Image images, nuint nimages, TexMetadata metadata, DDSFlags flags, Blob blob)
		{
			fixed (Image* pimages = &images)
			{
				int ret = SaveToDDSMemory2(pimages, nimages, metadata, flags, blob);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SaveToDDSFile")]
		public static extern int SaveToDDSFile(Image image, DDSFlags flags, char* szFile);

		public static int SaveToDDSFile(Image image, DDSFlags flags, ref char szFile)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = SaveToDDSFile(image, flags, pszFile);
				return ret;
			}
		}

		public static int SaveToDDSFile(Image image, DDSFlags flags, string szFile)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = SaveToDDSFile(image, flags, pStr0);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SaveToDDSFile2")]
		public static extern int SaveToDDSFile2(Image* images, nuint nimages, TexMetadata metadata, DDSFlags flags, char* szFile);

		public static int SaveToDDSFile2(ref Image images, nuint nimages, TexMetadata metadata, DDSFlags flags, char* szFile)
		{
			fixed (Image* pimages = &images)
			{
				int ret = SaveToDDSFile2(pimages, nimages, metadata, flags, szFile);
				return ret;
			}
		}

		public static int SaveToDDSFile2(Image* images, nuint nimages, TexMetadata metadata, DDSFlags flags, ref char szFile)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = SaveToDDSFile2(images, nimages, metadata, flags, pszFile);
				return ret;
			}
		}

		public static int SaveToDDSFile2(Image* images, nuint nimages, TexMetadata metadata, DDSFlags flags, string szFile)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = SaveToDDSFile2(images, nimages, metadata, flags, pStr0);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int SaveToDDSFile2(ref Image images, nuint nimages, TexMetadata metadata, DDSFlags flags, ref char szFile)
		{
			fixed (Image* pimages = &images)
			{
				fixed (char* pszFile = &szFile)
				{
					int ret = SaveToDDSFile2(pimages, nimages, metadata, flags, pszFile);
					return ret;
				}
			}
		}

		public static int SaveToDDSFile2(ref Image images, nuint nimages, TexMetadata metadata, DDSFlags flags, string szFile)
		{
			fixed (Image* pimages = &images)
			{
				char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
				int ret = SaveToDDSFile2(pimages, nimages, metadata, flags, pStr0);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		/// <summary>
		/// HDR operations
		/// </summary>
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "LoadFromHDRMemory")]
		public static extern int LoadFromHDRMemory(void* source, nuint size, TexMetadata* metadata, ScratchImage image);

		/// <summary>
		/// HDR operations
		/// </summary>
		public static int LoadFromHDRMemory(void* source, nuint size, ref TexMetadata metadata, ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromHDRMemory(source, size, pmetadata, image);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "LoadFromHDRFile")]
		public static extern int LoadFromHDRFile(char* szFile, TexMetadata* metadata, ScratchImage image);

		public static int LoadFromHDRFile(ref char szFile, TexMetadata* metadata, ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = LoadFromHDRFile(pszFile, metadata, image);
				return ret;
			}
		}

		public static int LoadFromHDRFile(string szFile, TexMetadata* metadata, ScratchImage image)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = LoadFromHDRFile(pStr0, metadata, image);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int LoadFromHDRFile(char* szFile, ref TexMetadata metadata, ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromHDRFile(szFile, pmetadata, image);
				return ret;
			}
		}

		public static int LoadFromHDRFile(ref char szFile, ref TexMetadata metadata, ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					int ret = LoadFromHDRFile(pszFile, pmetadata, image);
					return ret;
				}
			}
		}

		public static int LoadFromHDRFile(string szFile, ref TexMetadata metadata, ScratchImage image)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromHDRFile(pStr0, pmetadata, image);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SaveToHDRMemory")]
		public static extern int SaveToHDRMemory(Image image, Blob blob);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SaveToHDRFile")]
		public static extern int SaveToHDRFile(Image image, char* szFile);

		public static int SaveToHDRFile(Image image, ref char szFile)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = SaveToHDRFile(image, pszFile);
				return ret;
			}
		}

		public static int SaveToHDRFile(Image image, string szFile)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = SaveToHDRFile(image, pStr0);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// TGA operations
		/// </summary>
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "LoadFromTGAMemory")]
		public static extern int LoadFromTGAMemory(void* source, nuint size, TGAFlags flags, TexMetadata* metadata, ScratchImage image);

		/// <summary>
		/// TGA operations
		/// </summary>
		public static int LoadFromTGAMemory(void* source, nuint size, TGAFlags flags, ref TexMetadata metadata, ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromTGAMemory(source, size, flags, pmetadata, image);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "LoadFromTGAFile")]
		public static extern int LoadFromTGAFile(char* szFile, TGAFlags flags, TexMetadata* metadata, ScratchImage image);

		public static int LoadFromTGAFile(ref char szFile, TGAFlags flags, TexMetadata* metadata, ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = LoadFromTGAFile(pszFile, flags, metadata, image);
				return ret;
			}
		}

		public static int LoadFromTGAFile(string szFile, TGAFlags flags, TexMetadata* metadata, ScratchImage image)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = LoadFromTGAFile(pStr0, flags, metadata, image);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int LoadFromTGAFile(char* szFile, TGAFlags flags, ref TexMetadata metadata, ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromTGAFile(szFile, flags, pmetadata, image);
				return ret;
			}
		}

		public static int LoadFromTGAFile(ref char szFile, TGAFlags flags, ref TexMetadata metadata, ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					int ret = LoadFromTGAFile(pszFile, flags, pmetadata, image);
					return ret;
				}
			}
		}

		public static int LoadFromTGAFile(string szFile, TGAFlags flags, ref TexMetadata metadata, ScratchImage image)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromTGAFile(pStr0, flags, pmetadata, image);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SaveToTGAMemory")]
		public static extern int SaveToTGAMemory(Image image, TGAFlags flags, Blob blob, TexMetadata* metadata);

		public static int SaveToTGAMemory(Image image, TGAFlags flags, Blob blob, ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = SaveToTGAMemory(image, flags, blob, pmetadata);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SaveToTGAFile")]
		public static extern int SaveToTGAFile(Image image, TGAFlags flags, char* szFile, TexMetadata* metadata);

		public static int SaveToTGAFile(Image image, TGAFlags flags, ref char szFile, TexMetadata* metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = SaveToTGAFile(image, flags, pszFile, metadata);
				return ret;
			}
		}

		public static int SaveToTGAFile(Image image, TGAFlags flags, string szFile, TexMetadata* metadata)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = SaveToTGAFile(image, flags, pStr0, metadata);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int SaveToTGAFile(Image image, TGAFlags flags, char* szFile, ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = SaveToTGAFile(image, flags, szFile, pmetadata);
				return ret;
			}
		}

		public static int SaveToTGAFile(Image image, TGAFlags flags, ref char szFile, ref TexMetadata metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					int ret = SaveToTGAFile(image, flags, pszFile, pmetadata);
					return ret;
				}
			}
		}

		public static int SaveToTGAFile(Image image, TGAFlags flags, string szFile, ref TexMetadata metadata)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = SaveToTGAFile(image, flags, pStr0, pmetadata);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "LoadFromWICMemory")]
		public static extern int LoadFromWICMemory(void* source, nuint size, WICFlags flags, TexMetadata* metadata, ScratchImage image, GetMQR getMQR);

		public static int LoadFromWICMemory(void* source, nuint size, WICFlags flags, ref TexMetadata metadata, ScratchImage image, GetMQR getMQR)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromWICMemory(source, size, flags, pmetadata, image, getMQR);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "LoadFromWICFile")]
		public static extern int LoadFromWICFile(char* szFile, WICFlags flags, TexMetadata* metadata, ScratchImage image, GetMQR getMQR);

		public static int LoadFromWICFile(ref char szFile, WICFlags flags, TexMetadata* metadata, ScratchImage image, GetMQR getMQR)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = LoadFromWICFile(pszFile, flags, metadata, image, getMQR);
				return ret;
			}
		}

		public static int LoadFromWICFile(string szFile, WICFlags flags, TexMetadata* metadata, ScratchImage image, GetMQR getMQR)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = LoadFromWICFile(pStr0, flags, metadata, image, getMQR);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int LoadFromWICFile(char* szFile, WICFlags flags, ref TexMetadata metadata, ScratchImage image, GetMQR getMQR)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromWICFile(szFile, flags, pmetadata, image, getMQR);
				return ret;
			}
		}

		public static int LoadFromWICFile(ref char szFile, WICFlags flags, ref TexMetadata metadata, ScratchImage image, GetMQR getMQR)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					int ret = LoadFromWICFile(pszFile, flags, pmetadata, image, getMQR);
					return ret;
				}
			}
		}

		public static int LoadFromWICFile(string szFile, WICFlags flags, ref TexMetadata metadata, ScratchImage image, GetMQR getMQR)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromWICFile(pStr0, flags, pmetadata, image, getMQR);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SaveToWICMemory")]
		public static extern int SaveToWICMemory(Image image, WICFlags flags, Guid guidContainerFormat, Blob blob, Guid* targetFormat, SetCustomProps customProps);

		public static int SaveToWICMemory(Image image, WICFlags flags, Guid guidContainerFormat, Blob blob, ref Guid targetFormat, SetCustomProps customProps)
		{
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				int ret = SaveToWICMemory(image, flags, guidContainerFormat, blob, ptargetFormat, customProps);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SaveToWICMemory2")]
		public static extern int SaveToWICMemory2(Image* images, nuint nimages, WICFlags flags, Guid guidContainerFormat, Blob blob, Guid* targetFormat, SetCustomProps customProps);

		public static int SaveToWICMemory2(ref Image images, nuint nimages, WICFlags flags, Guid guidContainerFormat, Blob blob, Guid* targetFormat, SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				int ret = SaveToWICMemory2(pimages, nimages, flags, guidContainerFormat, blob, targetFormat, customProps);
				return ret;
			}
		}

		public static int SaveToWICMemory2(Image* images, nuint nimages, WICFlags flags, Guid guidContainerFormat, Blob blob, ref Guid targetFormat, SetCustomProps customProps)
		{
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				int ret = SaveToWICMemory2(images, nimages, flags, guidContainerFormat, blob, ptargetFormat, customProps);
				return ret;
			}
		}

		public static int SaveToWICMemory2(ref Image images, nuint nimages, WICFlags flags, Guid guidContainerFormat, Blob blob, ref Guid targetFormat, SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					int ret = SaveToWICMemory2(pimages, nimages, flags, guidContainerFormat, blob, ptargetFormat, customProps);
					return ret;
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SaveToWICFile")]
		public static extern int SaveToWICFile(Image image, WICFlags flags, Guid guidContainerFormat, char* szFile, Guid* targetFormat, SetCustomProps customProps);

		public static int SaveToWICFile(Image image, WICFlags flags, Guid guidContainerFormat, ref char szFile, Guid* targetFormat, SetCustomProps customProps)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = SaveToWICFile(image, flags, guidContainerFormat, pszFile, targetFormat, customProps);
				return ret;
			}
		}

		public static int SaveToWICFile(Image image, WICFlags flags, Guid guidContainerFormat, string szFile, Guid* targetFormat, SetCustomProps customProps)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = SaveToWICFile(image, flags, guidContainerFormat, pStr0, targetFormat, customProps);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int SaveToWICFile(Image image, WICFlags flags, Guid guidContainerFormat, char* szFile, ref Guid targetFormat, SetCustomProps customProps)
		{
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				int ret = SaveToWICFile(image, flags, guidContainerFormat, szFile, ptargetFormat, customProps);
				return ret;
			}
		}

		public static int SaveToWICFile(Image image, WICFlags flags, Guid guidContainerFormat, ref char szFile, ref Guid targetFormat, SetCustomProps customProps)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					int ret = SaveToWICFile(image, flags, guidContainerFormat, pszFile, ptargetFormat, customProps);
					return ret;
				}
			}
		}

		public static int SaveToWICFile(Image image, WICFlags flags, Guid guidContainerFormat, string szFile, ref Guid targetFormat, SetCustomProps customProps)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				int ret = SaveToWICFile(image, flags, guidContainerFormat, pStr0, ptargetFormat, customProps);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SaveToWICFile2")]
		public static extern int SaveToWICFile2(Image* images, nuint nimages, WICFlags flags, Guid guidContainerFormat, char* szFile, Guid* targetFormat, SetCustomProps customProps);

		public static int SaveToWICFile2(ref Image images, nuint nimages, WICFlags flags, Guid guidContainerFormat, char* szFile, Guid* targetFormat, SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				int ret = SaveToWICFile2(pimages, nimages, flags, guidContainerFormat, szFile, targetFormat, customProps);
				return ret;
			}
		}

		public static int SaveToWICFile2(Image* images, nuint nimages, WICFlags flags, Guid guidContainerFormat, ref char szFile, Guid* targetFormat, SetCustomProps customProps)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = SaveToWICFile2(images, nimages, flags, guidContainerFormat, pszFile, targetFormat, customProps);
				return ret;
			}
		}

		public static int SaveToWICFile2(Image* images, nuint nimages, WICFlags flags, Guid guidContainerFormat, string szFile, Guid* targetFormat, SetCustomProps customProps)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = SaveToWICFile2(images, nimages, flags, guidContainerFormat, pStr0, targetFormat, customProps);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int SaveToWICFile2(ref Image images, nuint nimages, WICFlags flags, Guid guidContainerFormat, ref char szFile, Guid* targetFormat, SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (char* pszFile = &szFile)
				{
					int ret = SaveToWICFile2(pimages, nimages, flags, guidContainerFormat, pszFile, targetFormat, customProps);
					return ret;
				}
			}
		}

		public static int SaveToWICFile2(ref Image images, nuint nimages, WICFlags flags, Guid guidContainerFormat, string szFile, Guid* targetFormat, SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
				int ret = SaveToWICFile2(pimages, nimages, flags, guidContainerFormat, pStr0, targetFormat, customProps);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		public static int SaveToWICFile2(Image* images, nuint nimages, WICFlags flags, Guid guidContainerFormat, char* szFile, ref Guid targetFormat, SetCustomProps customProps)
		{
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				int ret = SaveToWICFile2(images, nimages, flags, guidContainerFormat, szFile, ptargetFormat, customProps);
				return ret;
			}
		}

		public static int SaveToWICFile2(ref Image images, nuint nimages, WICFlags flags, Guid guidContainerFormat, char* szFile, ref Guid targetFormat, SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					int ret = SaveToWICFile2(pimages, nimages, flags, guidContainerFormat, szFile, ptargetFormat, customProps);
					return ret;
				}
			}
		}

		public static int SaveToWICFile2(Image* images, nuint nimages, WICFlags flags, Guid guidContainerFormat, ref char szFile, ref Guid targetFormat, SetCustomProps customProps)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					int ret = SaveToWICFile2(images, nimages, flags, guidContainerFormat, pszFile, ptargetFormat, customProps);
					return ret;
				}
			}
		}

		public static int SaveToWICFile2(Image* images, nuint nimages, WICFlags flags, Guid guidContainerFormat, string szFile, ref Guid targetFormat, SetCustomProps customProps)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			fixed (Guid* ptargetFormat = &targetFormat)
			{
				int ret = SaveToWICFile2(images, nimages, flags, guidContainerFormat, pStr0, ptargetFormat, customProps);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		public static int SaveToWICFile2(ref Image images, nuint nimages, WICFlags flags, Guid guidContainerFormat, ref char szFile, ref Guid targetFormat, SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				fixed (char* pszFile = &szFile)
				{
					fixed (Guid* ptargetFormat = &targetFormat)
					{
						int ret = SaveToWICFile2(pimages, nimages, flags, guidContainerFormat, pszFile, ptargetFormat, customProps);
						return ret;
					}
				}
			}
		}

		public static int SaveToWICFile2(ref Image images, nuint nimages, WICFlags flags, Guid guidContainerFormat, string szFile, ref Guid targetFormat, SetCustomProps customProps)
		{
			fixed (Image* pimages = &images)
			{
				char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
				fixed (Guid* ptargetFormat = &targetFormat)
				{
					int ret = SaveToWICFile2(pimages, nimages, flags, guidContainerFormat, pStr0, ptargetFormat, customProps);
					Marshal.FreeHGlobal((nint)pStr0);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compatability helpers
		/// </summary>
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "LoadFromTGAMemory2")]
		public static extern int LoadFromTGAMemory2(void* source, nuint size, TexMetadata* metadata, ScratchImage image);

		/// <summary>
		/// Compatability helpers
		/// </summary>
		public static int LoadFromTGAMemory2(void* source, nuint size, ref TexMetadata metadata, ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromTGAMemory2(source, size, pmetadata, image);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "LoadFromTGAFile2")]
		public static extern int LoadFromTGAFile2(char* szFile, TexMetadata* metadata, ScratchImage image);

		public static int LoadFromTGAFile2(ref char szFile, TexMetadata* metadata, ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = LoadFromTGAFile2(pszFile, metadata, image);
				return ret;
			}
		}

		public static int LoadFromTGAFile2(string szFile, TexMetadata* metadata, ScratchImage image)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = LoadFromTGAFile2(pStr0, metadata, image);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int LoadFromTGAFile2(char* szFile, ref TexMetadata metadata, ScratchImage image)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromTGAFile2(szFile, pmetadata, image);
				return ret;
			}
		}

		public static int LoadFromTGAFile2(ref char szFile, ref TexMetadata metadata, ScratchImage image)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					int ret = LoadFromTGAFile2(pszFile, pmetadata, image);
					return ret;
				}
			}
		}

		public static int LoadFromTGAFile2(string szFile, ref TexMetadata metadata, ScratchImage image)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = LoadFromTGAFile2(pStr0, pmetadata, image);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SaveToTGAMemory2")]
		public static extern int SaveToTGAMemory2(Image image, Blob blob, TexMetadata* metadata);

		public static int SaveToTGAMemory2(Image image, Blob blob, ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = SaveToTGAMemory2(image, blob, pmetadata);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SaveToTGAFile2")]
		public static extern int SaveToTGAFile2(Image image, char* szFile, TexMetadata* metadata);

		public static int SaveToTGAFile2(Image image, ref char szFile, TexMetadata* metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				int ret = SaveToTGAFile2(image, pszFile, metadata);
				return ret;
			}
		}

		public static int SaveToTGAFile2(Image image, string szFile, TexMetadata* metadata)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			int ret = SaveToTGAFile2(image, pStr0, metadata);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static int SaveToTGAFile2(Image image, char* szFile, ref TexMetadata metadata)
		{
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = SaveToTGAFile2(image, szFile, pmetadata);
				return ret;
			}
		}

		public static int SaveToTGAFile2(Image image, ref char szFile, ref TexMetadata metadata)
		{
			fixed (char* pszFile = &szFile)
			{
				fixed (TexMetadata* pmetadata = &metadata)
				{
					int ret = SaveToTGAFile2(image, pszFile, pmetadata);
					return ret;
				}
			}
		}

		public static int SaveToTGAFile2(Image image, string szFile, ref TexMetadata metadata)
		{
			char* pStr0 = (char*)Marshal.StringToHGlobalUni(szFile);
			fixed (TexMetadata* pmetadata = &metadata)
			{
				int ret = SaveToTGAFile2(image, pStr0, pmetadata);
				Marshal.FreeHGlobal((nint)pStr0);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FlipRotate")]
		public static extern int FlipRotate(Image srcImage, TexFRFlags flags, ScratchImage image);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FlipRotate2")]
		public static extern int FlipRotate2(Image* srcImages, nuint nimages, TexMetadata metadata, TexFRFlags flags, ScratchImage result);

		public static int FlipRotate2(ref Image srcImages, nuint nimages, TexMetadata metadata, TexFRFlags flags, ScratchImage result)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = FlipRotate2(psrcImages, nimages, metadata, flags, result);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Resize")]
		public static extern int Resize(Image srcImage, nuint width, nuint height, TexFilterFlags filter, ScratchImage image);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Resize2")]
		public static extern int Resize2(Image* srcImages, nuint nimages, TexMetadata metadata, nuint width, nuint height, TexFilterFlags filter, ScratchImage result);

		public static int Resize2(ref Image srcImages, nuint nimages, TexMetadata metadata, nuint width, nuint height, TexFilterFlags filter, ScratchImage result)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = Resize2(psrcImages, nimages, metadata, width, height, filter, result);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Convert")]
		public static extern int Convert(Image srcImage, int format, TexFilterFlags filter, float threshold, ScratchImage image);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Convert2")]
		public static extern int Convert2(Image* srcImages, nuint nimages, TexMetadata metadata, int format, TexFilterFlags filter, float threshold, ScratchImage result);

		public static int Convert2(ref Image srcImages, nuint nimages, TexMetadata metadata, int format, TexFilterFlags filter, float threshold, ScratchImage result)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = Convert2(psrcImages, nimages, metadata, format, filter, threshold, result);
				return ret;
			}
		}

		/// <summary>
		/// Convert the image to a new format
		/// </summary>
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ConvertToSinglePlane")]
		public static extern int ConvertToSinglePlane(Image srcImage, ScratchImage image);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ConvertToSinglePlane2")]
		public static extern int ConvertToSinglePlane2(Image* srcImages, nuint nimages, TexMetadata metadata, ScratchImage image);

		public static int ConvertToSinglePlane2(ref Image srcImages, nuint nimages, TexMetadata metadata, ScratchImage image)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = ConvertToSinglePlane2(psrcImages, nimages, metadata, image);
				return ret;
			}
		}

		/// <summary>
		/// Converts the image from a planar format to an equivalent non-planar format
		/// </summary>
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GenerateMipMaps")]
		public static extern int GenerateMipMaps(Image baseImage, TexFilterFlags filter, nuint levels, ScratchImage mipChain, bool allow1D);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GenerateMipMaps2")]
		public static extern int GenerateMipMaps2(Image* srcImages, nuint nimages, TexMetadata metadata, TexFilterFlags filter, nuint levels, ScratchImage mipChain);

		public static int GenerateMipMaps2(ref Image srcImages, nuint nimages, TexMetadata metadata, TexFilterFlags filter, nuint levels, ScratchImage mipChain)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = GenerateMipMaps2(psrcImages, nimages, metadata, filter, levels, mipChain);
				return ret;
			}
		}

		/// <summary>
		/// levels of '0' indicates a full mipchain, otherwise is generates that number of total levels (including the source base image)
		/// Defaults to Fant filtering which is equivalent to a box filter
		/// </summary>
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GenerateMipMaps3D")]
		public static extern int GenerateMipMaps3D(Image* baseImages, nuint depth, TexFilterFlags filter, nuint levels, ScratchImage mipChain);

		/// <summary>
		/// levels of '0' indicates a full mipchain, otherwise is generates that number of total levels (including the source base image)
		/// Defaults to Fant filtering which is equivalent to a box filter
		/// </summary>
		public static int GenerateMipMaps3D(ref Image baseImages, nuint depth, TexFilterFlags filter, nuint levels, ScratchImage mipChain)
		{
			fixed (Image* pbaseImages = &baseImages)
			{
				int ret = GenerateMipMaps3D(pbaseImages, depth, filter, levels, mipChain);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GenerateMipMaps3D2")]
		public static extern int GenerateMipMaps3D2(Image* srcImages, nuint nimages, TexFilterFlags filter, nuint levels, ScratchImage mipChain);

		public static int GenerateMipMaps3D2(ref Image srcImages, nuint nimages, TexFilterFlags filter, nuint levels, ScratchImage mipChain)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = GenerateMipMaps3D2(psrcImages, nimages, filter, levels, mipChain);
				return ret;
			}
		}

		/// <summary>
		/// levels of '0' indicates a full mipchain, otherwise is generates that number of total levels (including the source base image)
		/// Defaults to Fant filtering which is equivalent to a box filter
		/// </summary>
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ScaleMipMapsAlphaForCoverage")]
		public static extern int ScaleMipMapsAlphaForCoverage(Image* srcImages, nuint nimages, TexMetadata metadata, nuint item, float alphaReference, ScratchImage mipChain);

		/// <summary>
		/// levels of '0' indicates a full mipchain, otherwise is generates that number of total levels (including the source base image)
		/// Defaults to Fant filtering which is equivalent to a box filter
		/// </summary>
		public static int ScaleMipMapsAlphaForCoverage(ref Image srcImages, nuint nimages, TexMetadata metadata, nuint item, float alphaReference, ScratchImage mipChain)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = ScaleMipMapsAlphaForCoverage(psrcImages, nimages, metadata, item, alphaReference, mipChain);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PremultiplyAlpha")]
		public static extern int PremultiplyAlpha(Image srcImage, TexPMAlphaFlags flags, ScratchImage image);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PremultiplyAlpha2")]
		public static extern int PremultiplyAlpha2(Image* srcImages, nuint nimages, TexMetadata metadata, TexPMAlphaFlags flags, ScratchImage result);

		public static int PremultiplyAlpha2(ref Image srcImages, nuint nimages, TexMetadata metadata, TexPMAlphaFlags flags, ScratchImage result)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = PremultiplyAlpha2(psrcImages, nimages, metadata, flags, result);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Compress")]
		public static extern int Compress(Image srcImage, int format, TexCompressFlags compress, float threshold, ScratchImage cImage);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Compress2")]
		public static extern int Compress2(Image* srcImages, nuint nimages, TexMetadata metadata, int format, TexCompressFlags compress, float threshold, ScratchImage cImages);

		public static int Compress2(ref Image srcImages, nuint nimages, TexMetadata metadata, int format, TexCompressFlags compress, float threshold, ScratchImage cImages)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = Compress2(psrcImages, nimages, metadata, format, compress, threshold, cImages);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Compress3")]
		public static extern int Compress3(ID3D11Device* device, Image srcImage, int format, TexCompressFlags compress, float alphaWeight, ScratchImage image);

		public static int Compress3(ref ID3D11Device device, Image srcImage, int format, TexCompressFlags compress, float alphaWeight, ScratchImage image)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				int ret = Compress3(pdevice, srcImage, format, compress, alphaWeight, image);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Compress4")]
		public static extern int Compress4(ID3D11Device* device, Image* srcImages, nuint nimages, TexMetadata metadata, int format, TexCompressFlags compress, float alphaWeight, ScratchImage cImages);

		public static int Compress4(ref ID3D11Device device, Image* srcImages, nuint nimages, TexMetadata metadata, int format, TexCompressFlags compress, float alphaWeight, ScratchImage cImages)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				int ret = Compress4(pdevice, srcImages, nimages, metadata, format, compress, alphaWeight, cImages);
				return ret;
			}
		}

		public static int Compress4(ID3D11Device* device, ref Image srcImages, nuint nimages, TexMetadata metadata, int format, TexCompressFlags compress, float alphaWeight, ScratchImage cImages)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = Compress4(device, psrcImages, nimages, metadata, format, compress, alphaWeight, cImages);
				return ret;
			}
		}

		public static int Compress4(ref ID3D11Device device, ref Image srcImages, nuint nimages, TexMetadata metadata, int format, TexCompressFlags compress, float alphaWeight, ScratchImage cImages)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (Image* psrcImages = &srcImages)
				{
					int ret = Compress4(pdevice, psrcImages, nimages, metadata, format, compress, alphaWeight, cImages);
					return ret;
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Decompress")]
		public static extern int Decompress(Image cImage, int format, ScratchImage image);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Decompress2")]
		public static extern int Decompress2(Image* cImages, nuint nimages, TexMetadata metadata, int format, ScratchImage images);

		public static int Decompress2(ref Image cImages, nuint nimages, TexMetadata metadata, int format, ScratchImage images)
		{
			fixed (Image* pcImages = &cImages)
			{
				int ret = Decompress2(pcImages, nimages, metadata, format, images);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ComputeNormalMap")]
		public static extern int ComputeNormalMap(Image srcImage, CNMAPFlags flags, float amplitude, int format, ScratchImage normalMap);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ComputeNormalMap2")]
		public static extern int ComputeNormalMap2(Image* srcImages, nuint nimages, TexMetadata metadata, CNMAPFlags flags, float amplitude, int format, ScratchImage normalMaps);

		public static int ComputeNormalMap2(ref Image srcImages, nuint nimages, TexMetadata metadata, CNMAPFlags flags, float amplitude, int format, ScratchImage normalMaps)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = ComputeNormalMap2(psrcImages, nimages, metadata, flags, amplitude, format, normalMaps);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CopyRectangle")]
		public static extern int CopyRectangle(Image srcImage, Rect srcRect, Image dstImage, TexFilterFlags filter, nuint xOffset, nuint yOffset);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ComputeMSE")]
		public static extern int ComputeMSE(Image image1, Image image2, float* mse, float* mseV, CMSEFlags flags);

		public static int ComputeMSE(Image image1, Image image2, ref float mse, float* mseV, CMSEFlags flags)
		{
			fixed (float* pmse = &mse)
			{
				int ret = ComputeMSE(image1, image2, pmse, mseV, flags);
				return ret;
			}
		}

		public static int ComputeMSE(Image image1, Image image2, float* mse, ref float mseV, CMSEFlags flags)
		{
			fixed (float* pmseV = &mseV)
			{
				int ret = ComputeMSE(image1, image2, mse, pmseV, flags);
				return ret;
			}
		}

		public static int ComputeMSE(Image image1, Image image2, ref float mse, ref float mseV, CMSEFlags flags)
		{
			fixed (float* pmse = &mse)
			{
				fixed (float* pmseV = &mseV)
				{
					int ret = ComputeMSE(image1, image2, pmse, pmseV, flags);
					return ret;
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "EvaluateImage")]
		public static extern int EvaluateImage(Image image, EvaluateImageFunc pixelFunc);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "EvaluateImage2")]
		public static extern int EvaluateImage2(Image* images, nuint nimages, TexMetadata metadata, EvaluateImageFunc pixelFunc);

		public static int EvaluateImage2(ref Image images, nuint nimages, TexMetadata metadata, EvaluateImageFunc pixelFunc)
		{
			fixed (Image* pimages = &images)
			{
				int ret = EvaluateImage2(pimages, nimages, metadata, pixelFunc);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "TransformImage")]
		public static extern int TransformImage(Image image, TransformImageFunc pixelFunc, ScratchImage result);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "TransformImage2")]
		public static extern int TransformImage2(Image* srcImages, nuint nimages, TexMetadata metadata, TransformImageFunc pixelFunc, ScratchImage result);

		public static int TransformImage2(ref Image srcImages, nuint nimages, TexMetadata metadata, TransformImageFunc pixelFunc, ScratchImage result)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = TransformImage2(psrcImages, nimages, metadata, pixelFunc, result);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetWICCodec")]
		public static extern Guid GetWICCodec(WICCodecs codec);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "GetWICFactory")]
		public static extern IWICImagingFactory* GetWICFactory(bool* iswic2);

		public static IWICImagingFactory* GetWICFactory(ref bool iswic2)
		{
			fixed (bool* piswic2 = &iswic2)
			{
				IWICImagingFactory* ret = GetWICFactory(piswic2);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SetWICFactory")]
		public static extern void SetWICFactory(IWICImagingFactory* wIC);

		public static void SetWICFactory(ref IWICImagingFactory wIC)
		{
			fixed (IWICImagingFactory* pwIC = &wIC)
			{
				SetWICFactory(pwIC);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "EncodeDDSHeader")]
		public static extern int EncodeDDSHeader(TexMetadata metadata, DDSFlags flags, void* destination, nuint maxsize, nuint* required);

		public static int EncodeDDSHeader(TexMetadata metadata, DDSFlags flags, void* destination, nuint maxsize, ref nuint required)
		{
			fixed (nuint* prequired = &required)
			{
				int ret = EncodeDDSHeader(metadata, flags, destination, maxsize, prequired);
				return ret;
			}
		}

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsSupportedTexture")]
		public static extern bool IsSupportedTexture(ID3D11Device* device, TexMetadata metadata);

		public static bool IsSupportedTexture(ref ID3D11Device device, TexMetadata metadata)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				bool ret = IsSupportedTexture(pdevice, metadata);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CreateTexture")]
		public static extern int CreateTexture(ID3D11Device* device, Image* srcImages, nuint nimages, TexMetadata metadata, ID3D11Resource** ppResource);

		public static int CreateTexture(ref ID3D11Device device, Image* srcImages, nuint nimages, TexMetadata metadata, ID3D11Resource** ppResource)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				int ret = CreateTexture(pdevice, srcImages, nimages, metadata, ppResource);
				return ret;
			}
		}

		public static int CreateTexture(ID3D11Device* device, ref Image srcImages, nuint nimages, TexMetadata metadata, ID3D11Resource** ppResource)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = CreateTexture(device, psrcImages, nimages, metadata, ppResource);
				return ret;
			}
		}

		public static int CreateTexture(ref ID3D11Device device, ref Image srcImages, nuint nimages, TexMetadata metadata, ID3D11Resource** ppResource)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (Image* psrcImages = &srcImages)
				{
					int ret = CreateTexture(pdevice, psrcImages, nimages, metadata, ppResource);
					return ret;
				}
			}
		}

		public static int CreateTexture(ID3D11Device* device, Image* srcImages, nuint nimages, TexMetadata metadata, ref ID3D11Resource* ppResource)
		{
			fixed (ID3D11Resource** pppResource = &ppResource)
			{
				int ret = CreateTexture(device, srcImages, nimages, metadata, pppResource);
				return ret;
			}
		}

		public static int CreateTexture(ref ID3D11Device device, Image* srcImages, nuint nimages, TexMetadata metadata, ref ID3D11Resource* ppResource)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (ID3D11Resource** pppResource = &ppResource)
				{
					int ret = CreateTexture(pdevice, srcImages, nimages, metadata, pppResource);
					return ret;
				}
			}
		}

		public static int CreateTexture(ID3D11Device* device, ref Image srcImages, nuint nimages, TexMetadata metadata, ref ID3D11Resource* ppResource)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				fixed (ID3D11Resource** pppResource = &ppResource)
				{
					int ret = CreateTexture(device, psrcImages, nimages, metadata, pppResource);
					return ret;
				}
			}
		}

		public static int CreateTexture(ref ID3D11Device device, ref Image srcImages, nuint nimages, TexMetadata metadata, ref ID3D11Resource* ppResource)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (Image* psrcImages = &srcImages)
				{
					fixed (ID3D11Resource** pppResource = &ppResource)
					{
						int ret = CreateTexture(pdevice, psrcImages, nimages, metadata, pppResource);
						return ret;
					}
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CreateShaderResourceView")]
		public static extern int CreateShaderResourceView(ID3D11Device* device, Image* srcImages, nuint nimages, TexMetadata metadata, ID3D11ShaderResourceView** ppSRV);

		public static int CreateShaderResourceView(ref ID3D11Device device, Image* srcImages, nuint nimages, TexMetadata metadata, ID3D11ShaderResourceView** ppSRV)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				int ret = CreateShaderResourceView(pdevice, srcImages, nimages, metadata, ppSRV);
				return ret;
			}
		}

		public static int CreateShaderResourceView(ID3D11Device* device, ref Image srcImages, nuint nimages, TexMetadata metadata, ID3D11ShaderResourceView** ppSRV)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = CreateShaderResourceView(device, psrcImages, nimages, metadata, ppSRV);
				return ret;
			}
		}

		public static int CreateShaderResourceView(ref ID3D11Device device, ref Image srcImages, nuint nimages, TexMetadata metadata, ID3D11ShaderResourceView** ppSRV)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (Image* psrcImages = &srcImages)
				{
					int ret = CreateShaderResourceView(pdevice, psrcImages, nimages, metadata, ppSRV);
					return ret;
				}
			}
		}

		public static int CreateShaderResourceView(ID3D11Device* device, Image* srcImages, nuint nimages, TexMetadata metadata, ref ID3D11ShaderResourceView* ppSRV)
		{
			fixed (ID3D11ShaderResourceView** pppSRV = &ppSRV)
			{
				int ret = CreateShaderResourceView(device, srcImages, nimages, metadata, pppSRV);
				return ret;
			}
		}

		public static int CreateShaderResourceView(ref ID3D11Device device, Image* srcImages, nuint nimages, TexMetadata metadata, ref ID3D11ShaderResourceView* ppSRV)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (ID3D11ShaderResourceView** pppSRV = &ppSRV)
				{
					int ret = CreateShaderResourceView(pdevice, srcImages, nimages, metadata, pppSRV);
					return ret;
				}
			}
		}

		public static int CreateShaderResourceView(ID3D11Device* device, ref Image srcImages, nuint nimages, TexMetadata metadata, ref ID3D11ShaderResourceView* ppSRV)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				fixed (ID3D11ShaderResourceView** pppSRV = &ppSRV)
				{
					int ret = CreateShaderResourceView(device, psrcImages, nimages, metadata, pppSRV);
					return ret;
				}
			}
		}

		public static int CreateShaderResourceView(ref ID3D11Device device, ref Image srcImages, nuint nimages, TexMetadata metadata, ref ID3D11ShaderResourceView* ppSRV)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (Image* psrcImages = &srcImages)
				{
					fixed (ID3D11ShaderResourceView** pppSRV = &ppSRV)
					{
						int ret = CreateShaderResourceView(pdevice, psrcImages, nimages, metadata, pppSRV);
						return ret;
					}
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CreateTextureEx")]
		public static extern int CreateTextureEx(ID3D11Device* device, Image* srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ID3D11Resource** ppResource);

		public static int CreateTextureEx(ref ID3D11Device device, Image* srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ID3D11Resource** ppResource)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				int ret = CreateTextureEx(pdevice, srcImages, nimages, metadata, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, ppResource);
				return ret;
			}
		}

		public static int CreateTextureEx(ID3D11Device* device, ref Image srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ID3D11Resource** ppResource)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = CreateTextureEx(device, psrcImages, nimages, metadata, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, ppResource);
				return ret;
			}
		}

		public static int CreateTextureEx(ref ID3D11Device device, ref Image srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ID3D11Resource** ppResource)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (Image* psrcImages = &srcImages)
				{
					int ret = CreateTextureEx(pdevice, psrcImages, nimages, metadata, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, ppResource);
					return ret;
				}
			}
		}

		public static int CreateTextureEx(ID3D11Device* device, Image* srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ref ID3D11Resource* ppResource)
		{
			fixed (ID3D11Resource** pppResource = &ppResource)
			{
				int ret = CreateTextureEx(device, srcImages, nimages, metadata, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, pppResource);
				return ret;
			}
		}

		public static int CreateTextureEx(ref ID3D11Device device, Image* srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ref ID3D11Resource* ppResource)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (ID3D11Resource** pppResource = &ppResource)
				{
					int ret = CreateTextureEx(pdevice, srcImages, nimages, metadata, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, pppResource);
					return ret;
				}
			}
		}

		public static int CreateTextureEx(ID3D11Device* device, ref Image srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ref ID3D11Resource* ppResource)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				fixed (ID3D11Resource** pppResource = &ppResource)
				{
					int ret = CreateTextureEx(device, psrcImages, nimages, metadata, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, pppResource);
					return ret;
				}
			}
		}

		public static int CreateTextureEx(ref ID3D11Device device, ref Image srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ref ID3D11Resource* ppResource)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (Image* psrcImages = &srcImages)
				{
					fixed (ID3D11Resource** pppResource = &ppResource)
					{
						int ret = CreateTextureEx(pdevice, psrcImages, nimages, metadata, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, pppResource);
						return ret;
					}
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CreateTextureEx2")]
		public static extern int CreateTextureEx2(ID3D11Device* device, ScratchImage img, uint usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ID3D11Resource** ppResource);

		public static int CreateTextureEx2(ref ID3D11Device device, ScratchImage img, uint usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ID3D11Resource** ppResource)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				int ret = CreateTextureEx2(pdevice, img, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, ppResource);
				return ret;
			}
		}

		public static int CreateTextureEx2(ID3D11Device* device, ScratchImage img, uint usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ref ID3D11Resource* ppResource)
		{
			fixed (ID3D11Resource** pppResource = &ppResource)
			{
				int ret = CreateTextureEx2(device, img, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, pppResource);
				return ret;
			}
		}

		public static int CreateTextureEx2(ref ID3D11Device device, ScratchImage img, uint usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ref ID3D11Resource* ppResource)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (ID3D11Resource** pppResource = &ppResource)
				{
					int ret = CreateTextureEx2(pdevice, img, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, pppResource);
					return ret;
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CreateShaderResourceViewEx")]
		public static extern int CreateShaderResourceViewEx(ID3D11Device* device, Image* srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ID3D11ShaderResourceView** ppSRV);

		public static int CreateShaderResourceViewEx(ref ID3D11Device device, Image* srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ID3D11ShaderResourceView** ppSRV)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				int ret = CreateShaderResourceViewEx(pdevice, srcImages, nimages, metadata, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, ppSRV);
				return ret;
			}
		}

		public static int CreateShaderResourceViewEx(ID3D11Device* device, ref Image srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ID3D11ShaderResourceView** ppSRV)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = CreateShaderResourceViewEx(device, psrcImages, nimages, metadata, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, ppSRV);
				return ret;
			}
		}

		public static int CreateShaderResourceViewEx(ref ID3D11Device device, ref Image srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ID3D11ShaderResourceView** ppSRV)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (Image* psrcImages = &srcImages)
				{
					int ret = CreateShaderResourceViewEx(pdevice, psrcImages, nimages, metadata, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, ppSRV);
					return ret;
				}
			}
		}

		public static int CreateShaderResourceViewEx(ID3D11Device* device, Image* srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ref ID3D11ShaderResourceView* ppSRV)
		{
			fixed (ID3D11ShaderResourceView** pppSRV = &ppSRV)
			{
				int ret = CreateShaderResourceViewEx(device, srcImages, nimages, metadata, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, pppSRV);
				return ret;
			}
		}

		public static int CreateShaderResourceViewEx(ref ID3D11Device device, Image* srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ref ID3D11ShaderResourceView* ppSRV)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (ID3D11ShaderResourceView** pppSRV = &ppSRV)
				{
					int ret = CreateShaderResourceViewEx(pdevice, srcImages, nimages, metadata, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, pppSRV);
					return ret;
				}
			}
		}

		public static int CreateShaderResourceViewEx(ID3D11Device* device, ref Image srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ref ID3D11ShaderResourceView* ppSRV)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				fixed (ID3D11ShaderResourceView** pppSRV = &ppSRV)
				{
					int ret = CreateShaderResourceViewEx(device, psrcImages, nimages, metadata, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, pppSRV);
					return ret;
				}
			}
		}

		public static int CreateShaderResourceViewEx(ref ID3D11Device device, ref Image srcImages, nuint nimages, TexMetadata metadata, Usage usage, uint bindFlags, uint cpuAccessFlags, uint miscFlags, CreateTexFlags createFlags, ref ID3D11ShaderResourceView* ppSRV)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (Image* psrcImages = &srcImages)
				{
					fixed (ID3D11ShaderResourceView** pppSRV = &ppSRV)
					{
						int ret = CreateShaderResourceViewEx(pdevice, psrcImages, nimages, metadata, usage, bindFlags, cpuAccessFlags, miscFlags, createFlags, pppSRV);
						return ret;
					}
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CaptureTexture")]
		public static extern int CaptureTexture(ID3D11Device* device, ID3D11DeviceContext* context, ID3D11Resource* source, ScratchImage result);

		public static int CaptureTexture(ref ID3D11Device device, ID3D11DeviceContext* context, ID3D11Resource* source, ScratchImage result)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				int ret = CaptureTexture(pdevice, context, source, result);
				return ret;
			}
		}

		public static int CaptureTexture(ID3D11Device* device, ref ID3D11DeviceContext context, ID3D11Resource* source, ScratchImage result)
		{
			fixed (ID3D11DeviceContext* pcontext = &context)
			{
				int ret = CaptureTexture(device, pcontext, source, result);
				return ret;
			}
		}

		public static int CaptureTexture(ref ID3D11Device device, ref ID3D11DeviceContext context, ID3D11Resource* source, ScratchImage result)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (ID3D11DeviceContext* pcontext = &context)
				{
					int ret = CaptureTexture(pdevice, pcontext, source, result);
					return ret;
				}
			}
		}

		public static int CaptureTexture(ID3D11Device* device, ID3D11DeviceContext* context, ref ID3D11Resource source, ScratchImage result)
		{
			fixed (ID3D11Resource* psource = &source)
			{
				int ret = CaptureTexture(device, context, psource, result);
				return ret;
			}
		}

		public static int CaptureTexture(ref ID3D11Device device, ID3D11DeviceContext* context, ref ID3D11Resource source, ScratchImage result)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (ID3D11Resource* psource = &source)
				{
					int ret = CaptureTexture(pdevice, context, psource, result);
					return ret;
				}
			}
		}

		public static int CaptureTexture(ID3D11Device* device, ref ID3D11DeviceContext context, ref ID3D11Resource source, ScratchImage result)
		{
			fixed (ID3D11DeviceContext* pcontext = &context)
			{
				fixed (ID3D11Resource* psource = &source)
				{
					int ret = CaptureTexture(device, pcontext, psource, result);
					return ret;
				}
			}
		}

		public static int CaptureTexture(ref ID3D11Device device, ref ID3D11DeviceContext context, ref ID3D11Resource source, ScratchImage result)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (ID3D11DeviceContext* pcontext = &context)
				{
					fixed (ID3D11Resource* psource = &source)
					{
						int ret = CaptureTexture(pdevice, pcontext, psource, result);
						return ret;
					}
				}
			}
		}

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IsSupportedTextureD3D12")]
		public static extern bool IsSupportedTextureD3D12(ID3D12Device* device, TexMetadata metadata);

		public static bool IsSupportedTextureD3D12(ref ID3D12Device device, TexMetadata metadata)
		{
			fixed (ID3D12Device* pdevice = &device)
			{
				bool ret = IsSupportedTextureD3D12(pdevice, metadata);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CreateTextureD3D12")]
		public static extern int CreateTextureD3D12(ID3D12Device* device, TexMetadata metadata, ID3D12Resource** ppResource);

		public static int CreateTextureD3D12(ref ID3D12Device device, TexMetadata metadata, ID3D12Resource** ppResource)
		{
			fixed (ID3D12Device* pdevice = &device)
			{
				int ret = CreateTextureD3D12(pdevice, metadata, ppResource);
				return ret;
			}
		}

		public static int CreateTextureD3D12(ID3D12Device* device, TexMetadata metadata, ref ID3D12Resource* ppResource)
		{
			fixed (ID3D12Resource** pppResource = &ppResource)
			{
				int ret = CreateTextureD3D12(device, metadata, pppResource);
				return ret;
			}
		}

		public static int CreateTextureD3D12(ref ID3D12Device device, TexMetadata metadata, ref ID3D12Resource* ppResource)
		{
			fixed (ID3D12Device* pdevice = &device)
			{
				fixed (ID3D12Resource** pppResource = &ppResource)
				{
					int ret = CreateTextureD3D12(pdevice, metadata, pppResource);
					return ret;
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CreateTextureExD3D12")]
		public static extern int CreateTextureExD3D12(ID3D12Device* device, TexMetadata metadata, ResourceFlags resFlags, CreateTexFlags createFlags, ID3D12Resource** ppResource);

		public static int CreateTextureExD3D12(ref ID3D12Device device, TexMetadata metadata, ResourceFlags resFlags, CreateTexFlags createFlags, ID3D12Resource** ppResource)
		{
			fixed (ID3D12Device* pdevice = &device)
			{
				int ret = CreateTextureExD3D12(pdevice, metadata, resFlags, createFlags, ppResource);
				return ret;
			}
		}

		public static int CreateTextureExD3D12(ID3D12Device* device, TexMetadata metadata, ResourceFlags resFlags, CreateTexFlags createFlags, ref ID3D12Resource* ppResource)
		{
			fixed (ID3D12Resource** pppResource = &ppResource)
			{
				int ret = CreateTextureExD3D12(device, metadata, resFlags, createFlags, pppResource);
				return ret;
			}
		}

		public static int CreateTextureExD3D12(ref ID3D12Device device, TexMetadata metadata, ResourceFlags resFlags, CreateTexFlags createFlags, ref ID3D12Resource* ppResource)
		{
			fixed (ID3D12Device* pdevice = &device)
			{
				fixed (ID3D12Resource** pppResource = &ppResource)
				{
					int ret = CreateTextureExD3D12(pdevice, metadata, resFlags, createFlags, pppResource);
					return ret;
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PrepareUpload")]
		public static extern int PrepareUpload(ID3D12Device* device, Image* srcImages, nuint nimages, TexMetadata metadata, void** subresources, nuint* nSubresources);

		public static int PrepareUpload(ref ID3D12Device device, Image* srcImages, nuint nimages, TexMetadata metadata, void** subresources, nuint* nSubresources)
		{
			fixed (ID3D12Device* pdevice = &device)
			{
				int ret = PrepareUpload(pdevice, srcImages, nimages, metadata, subresources, nSubresources);
				return ret;
			}
		}

		public static int PrepareUpload(ID3D12Device* device, ref Image srcImages, nuint nimages, TexMetadata metadata, void** subresources, nuint* nSubresources)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				int ret = PrepareUpload(device, psrcImages, nimages, metadata, subresources, nSubresources);
				return ret;
			}
		}

		public static int PrepareUpload(ref ID3D12Device device, ref Image srcImages, nuint nimages, TexMetadata metadata, void** subresources, nuint* nSubresources)
		{
			fixed (ID3D12Device* pdevice = &device)
			{
				fixed (Image* psrcImages = &srcImages)
				{
					int ret = PrepareUpload(pdevice, psrcImages, nimages, metadata, subresources, nSubresources);
					return ret;
				}
			}
		}

		public static int PrepareUpload(ID3D12Device* device, Image* srcImages, nuint nimages, TexMetadata metadata, void** subresources, ref nuint nSubresources)
		{
			fixed (nuint* pnSubresources = &nSubresources)
			{
				int ret = PrepareUpload(device, srcImages, nimages, metadata, subresources, pnSubresources);
				return ret;
			}
		}

		public static int PrepareUpload(ref ID3D12Device device, Image* srcImages, nuint nimages, TexMetadata metadata, void** subresources, ref nuint nSubresources)
		{
			fixed (ID3D12Device* pdevice = &device)
			{
				fixed (nuint* pnSubresources = &nSubresources)
				{
					int ret = PrepareUpload(pdevice, srcImages, nimages, metadata, subresources, pnSubresources);
					return ret;
				}
			}
		}

		public static int PrepareUpload(ID3D12Device* device, ref Image srcImages, nuint nimages, TexMetadata metadata, void** subresources, ref nuint nSubresources)
		{
			fixed (Image* psrcImages = &srcImages)
			{
				fixed (nuint* pnSubresources = &nSubresources)
				{
					int ret = PrepareUpload(device, psrcImages, nimages, metadata, subresources, pnSubresources);
					return ret;
				}
			}
		}

		public static int PrepareUpload(ref ID3D12Device device, ref Image srcImages, nuint nimages, TexMetadata metadata, void** subresources, ref nuint nSubresources)
		{
			fixed (ID3D12Device* pdevice = &device)
			{
				fixed (Image* psrcImages = &srcImages)
				{
					fixed (nuint* pnSubresources = &nSubresources)
					{
						int ret = PrepareUpload(pdevice, psrcImages, nimages, metadata, subresources, pnSubresources);
						return ret;
					}
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CaptureTextureD3D12")]
		public static extern int CaptureTextureD3D12(ID3D12CommandQueue* commandQueue, ID3D12Resource* source, bool isCubeMap, ScratchImage result, ResourceStates beforeState, ResourceStates afterState);

		public static int CaptureTextureD3D12(ref ID3D12CommandQueue commandQueue, ID3D12Resource* source, bool isCubeMap, ScratchImage result, ResourceStates beforeState, ResourceStates afterState)
		{
			fixed (ID3D12CommandQueue* pcommandQueue = &commandQueue)
			{
				int ret = CaptureTextureD3D12(pcommandQueue, source, isCubeMap, result, beforeState, afterState);
				return ret;
			}
		}

		public static int CaptureTextureD3D12(ID3D12CommandQueue* commandQueue, ref ID3D12Resource source, bool isCubeMap, ScratchImage result, ResourceStates beforeState, ResourceStates afterState)
		{
			fixed (ID3D12Resource* psource = &source)
			{
				int ret = CaptureTextureD3D12(commandQueue, psource, isCubeMap, result, beforeState, afterState);
				return ret;
			}
		}

		public static int CaptureTextureD3D12(ref ID3D12CommandQueue commandQueue, ref ID3D12Resource source, bool isCubeMap, ScratchImage result, ResourceStates beforeState, ResourceStates afterState)
		{
			fixed (ID3D12CommandQueue* pcommandQueue = &commandQueue)
			{
				fixed (ID3D12Resource* psource = &source)
				{
					int ret = CaptureTextureD3D12(pcommandQueue, psource, isCubeMap, result, beforeState, afterState);
					return ret;
				}
			}
		}

	}
}
