// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;

namespace HexaEngine.DirectXTex
{
	public enum FormatType
	{
		Typeless = unchecked(0),
		Float = unchecked(1),
		Unorm = unchecked(2),
		Snorm = unchecked(3),
		Uint = unchecked(4),
		Sint = unchecked(5),
	}

	public enum CPFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Normal operation
		/// </summary>
		LegacyDword = unchecked(1),

		/// <summary>
		/// Assume pitch is DWORD aligned instead of BYTE aligned
		/// </summary>
		Paragraph = unchecked(2),

		/// <summary>
		/// Assume pitch is 16-byte aligned instead of BYTE aligned
		/// </summary>
		Ymm = unchecked(4),

		/// <summary>
		/// Assume pitch is 32-byte aligned instead of BYTE aligned
		/// </summary>
		Zmm = unchecked(8),

		/// <summary>
		/// Assume pitch is 64-byte aligned instead of BYTE aligned
		/// </summary>
		Page4K = unchecked(512),

		/// <summary>
		/// Assume pitch is 4096-byte aligned instead of BYTE aligned
		/// </summary>
		BadDxtnTails = unchecked(4096),

		/// <summary>
		/// BC formats with malformed mipchain blocks smaller than 4x4
		/// </summary>
		Flags24Bpp = unchecked(65536),

		/// <summary>
		/// Override with a legacy 24 bits-per-pixel format size
		/// </summary>
		Flags16Bpp = unchecked(131072),

		/// <summary>
		/// Override with a legacy 16 bits-per-pixel format size
		/// </summary>
		Flags8Bpp = unchecked(262144),

	}

	public enum TexDimension
	{
		Texture1D = unchecked(2),
		Texture2D = unchecked(3),
		Texture3D = unchecked(4),
	}

	/// <summary>
	/// Subset here matches D3D10_RESOURCE_MISC_FLAG and D3D11_RESOURCE_MISC_FLAG
	/// </summary>
	public enum TexMiscFlag
	{
		Texturecube = unchecked((int)0x4L),
	}

	public enum TexMiscFlag2
	{
		Flag22AlphaModeMask = unchecked((int)0x7L),
	}

	/// <summary>
	/// Matches DDS_ALPHA_MODE, encoded in MISC_FLAGS2
	/// </summary>
	public enum TexAlphaMode
	{
		Unknown = unchecked(0),
		Straight = unchecked(1),
		Premultiplied = unchecked(2),
		Opaque = unchecked(3),
		Custom = unchecked(4),
	}

	public enum DDSFlags
	{
		None = unchecked(0),
		LegacyDword = unchecked(1),
		/// <summary>
		/// Assume pitch is DWORD aligned instead of BYTE aligned (used by some legacy DDS files)
		/// </summary>
		NoLegacyExpansion = unchecked(2),

		/// <summary>
		/// Do not implicitly convert legacy formats that result in larger pixel sizes (24 bpp, 3:3:2, A8L8, A4L4, P8, A8P8)
		/// </summary>
		NoR10B10G10A2Fixup = unchecked(4),

		/// <summary>
		/// Do not use work-around for long-standing D3DX DDS file format issue which reversed the 10:10:10:2 color order masks
		/// </summary>
		ForceRgb = unchecked(8),

		/// <summary>
		/// Convert DXGI 1.1 BGR formats to DXGI_FORMAT_R8G8B8A8_UNORM to avoid use of optional WDDM 1.1 formats
		/// </summary>
		No16Bpp = unchecked(16),

		/// <summary>
		/// Conversions avoid use of 565, 5551, and 4444 formats and instead expand to 8888 to avoid use of optional WDDM 1.2 formats
		/// </summary>
		ExpandLuminance = unchecked(32),

		/// <summary>
		/// When loading legacy luminance formats expand replicating the color channels rather than leaving them packed (L8, L16, A8L8)
		/// </summary>
		BadDxtnTails = unchecked(64),

		/// <summary>
		/// Some older DXTn DDS files incorrectly handle mipchain tails for blocks smaller than 4x4
		/// </summary>
		ForceDx10Ext = unchecked(65536),

		/// <summary>
		/// Always use the 'DX10' header extension for DDS writer (i.e. don't try to write DX9 compatible DDS files)
		/// </summary>
		ForceDx10ExtMisc2 = unchecked(131072),

		/// <summary>
		/// DDS_FLAGS_FORCE_DX10_EXT including miscFlags2 information (result may not be compatible with D3DX10 or D3DX11)
		/// </summary>
		ForceDx9Legacy = unchecked(262144),

		/// <summary>
		/// Force use of legacy header for DDS writer (will fail if unable to write as such)
		/// </summary>
		AllowLargeFiles = unchecked(16777216),

	}

	public enum TGAFlags
	{
		None = unchecked(0),
		Bgr = unchecked(1),
		/// <summary>
		/// 24bpp files are returned as BGRX; 32bpp files are returned as BGRA
		/// </summary>
		AllowAllZeroAlpha = unchecked(2),

		/// <summary>
		/// If the loaded image has an all zero alpha channel, normally we assume it should be opaque. This flag leaves it alone.
		/// </summary>
		IgnoreSrgb = unchecked(16),

		/// <summary>
		/// Ignores sRGB TGA 2.0 metadata if present in the file
		/// </summary>
		ForceSrgb = unchecked(32),

		/// <summary>
		/// Writes sRGB metadata into the file reguardless of format (TGA 2.0 only)
		/// </summary>
		ForceLinear = unchecked(64),

		/// <summary>
		/// Writes linear gamma metadata into the file reguardless of format (TGA 2.0 only)
		/// </summary>
		DefaultSrgb = unchecked(128),

	}

	public enum WICFlags
	{
		None = unchecked(0),
		ForceRgb = unchecked(1),
		/// <summary>
		/// Loads DXGI 1.1 BGR formats as DXGI_FORMAT_R8G8B8A8_UNORM to avoid use of optional WDDM 1.1 formats
		/// </summary>
		NoX2Bias = unchecked(2),

		/// <summary>
		/// Loads DXGI 1.1 X2 10:10:10:2 format as DXGI_FORMAT_R10G10B10A2_UNORM
		/// </summary>
		No16Bpp = unchecked(4),

		/// <summary>
		/// Loads 565, 5551, and 4444 formats as 8888 to avoid use of optional WDDM 1.2 formats
		/// </summary>
		AllowMono = unchecked(8),

		/// <summary>
		/// Loads 1-bit monochrome (black 
		/// &
		/// white) as R1_UNORM rather than 8-bit grayscale
		/// </summary>
		AllFrames = unchecked(16),

		/// <summary>
		/// Loads all images in a multi-frame file, converting/resizing to match the first frame as needed, defaults to 0th frame otherwise
		/// </summary>
		IgnoreSrgb = unchecked(32),

		/// <summary>
		/// Ignores sRGB metadata if present in the file
		/// </summary>
		ForceSrgb = unchecked(64),

		/// <summary>
		/// Writes sRGB metadata into the file reguardless of format
		/// </summary>
		ForceLinear = unchecked(128),

		/// <summary>
		/// Writes linear gamma metadata into the file reguardless of format
		/// </summary>
		DefaultSrgb = unchecked(256),

		/// <summary>
		/// If no colorspace is specified, assume sRGB
		/// </summary>
		Dither = unchecked(65536),

		/// <summary>
		/// Use ordered 4x4 dithering for any required conversions
		/// </summary>
		DitherDiffusion = unchecked(131072),

		/// <summary>
		/// Use error-diffusion dithering for any required conversions
		/// </summary>
		FilterPoint = unchecked(1048576),

		/// <summary>
		/// Use error-diffusion dithering for any required conversions
		/// </summary>
		FilterLinear = unchecked(2097152),

		/// <summary>
		/// Use error-diffusion dithering for any required conversions
		/// </summary>
		FilterCubic = unchecked(3145728),

		/// <summary>
		/// Combination of Linear and Box filter
		/// </summary>
		FilterFant = unchecked(4194304),

	}

	public enum TexFRFlags
	{
		Rotate0 = unchecked(0),
		Rotate90 = unchecked(1),
		Rotate180 = unchecked(2),
		Rotate270 = unchecked(3),
		FlipHorizontal = unchecked(8),
		FlipVertical = unchecked(16),
	}

	public enum TexFilterFlags
	{
		Default = unchecked(0),
		WrapU = unchecked(1),
		WrapV = unchecked(2),
		WrapW = unchecked(4),
		Wrap = unchecked(7),
		MirrorU = unchecked(16),
		MirrorV = unchecked(32),
		MirrorW = unchecked(64),
		Mirror = unchecked(112),
		/// <summary>
		/// Wrap vs. Mirror vs. Clamp filtering options
		/// </summary>
		SeparateAlpha = unchecked(256),

		/// <summary>
		/// Resize color and alpha channel independently
		/// </summary>
		FloatX2Bias = unchecked(512),

		/// <summary>
		/// Enable *2 - 1 conversion cases for unorm
		/// <
		/// ->float and positive-only float formats
		/// </summary>
		RgbCopyRed = unchecked(4096),

		/// <summary>
		/// Enable *2 - 1 conversion cases for unorm
		/// <
		/// ->float and positive-only float formats
		/// </summary>
		RgbCopyGreen = unchecked(8192),

		/// <summary>
		/// Enable *2 - 1 conversion cases for unorm
		/// <
		/// ->float and positive-only float formats
		/// </summary>
		RgbCopyBlue = unchecked(16384),

		/// <summary>
		/// Enable *2 - 1 conversion cases for unorm
		/// <
		/// ->float and positive-only float formats
		/// </summary>
		RgbCopyAlpha = unchecked(32768),

		/// <summary>
		/// When converting RGB(A) to R, defaults to using grayscale. These flags indicate copying a specific channel instead
		/// When converting RGB(A) to RG, defaults to copying RED | GREEN. These flags control which channels are selected instead.
		/// </summary>
		Dither = unchecked(65536),

		/// <summary>
		/// Use ordered 4x4 dithering for any required conversions
		/// </summary>
		DitherDiffusion = unchecked(131072),

		/// <summary>
		/// Use error-diffusion dithering for any required conversions
		/// </summary>
		Point = unchecked(1048576),

		/// <summary>
		/// Use error-diffusion dithering for any required conversions
		/// </summary>
		Linear = unchecked(2097152),

		/// <summary>
		/// Use error-diffusion dithering for any required conversions
		/// </summary>
		Cubic = unchecked(3145728),

		/// <summary>
		/// Use error-diffusion dithering for any required conversions
		/// </summary>
		Box = unchecked(4194304),

		/// <summary>
		/// Equiv to Box filtering for mipmap generation
		/// </summary>
		Fant = unchecked(4194304),

		Triangle = unchecked(5242880),
		/// <summary>
		/// Filtering mode to use for any required image resizing
		/// </summary>
		SrgbIn = unchecked(16777216),

		/// <summary>
		/// Filtering mode to use for any required image resizing
		/// </summary>
		SrgbOut = unchecked(33554432),

		/// <summary>
		/// Filtering mode to use for any required image resizing
		/// </summary>
		Srgb = unchecked(50331648),

		/// <summary>
		/// sRGB 
		/// <
		/// -> RGB for use in conversion operations
		/// if the input format type is IsSRGB(), then SRGB_IN is on by default
		/// if the output format type is IsSRGB(), then SRGB_OUT is on by default
		/// </summary>
		ForceNonWic = unchecked(268435456),

		/// <summary>
		/// Forces use of the non-WIC path when both are an option
		/// </summary>
		ForceWic = unchecked(536870912),

	}

	public enum TexPMAlphaFlags
	{
		Default = unchecked(0),
		IgnoreSrgb = unchecked(1),
		/// <summary>
		/// ignores sRGB colorspace conversions
		/// </summary>
		Reverse = unchecked(2),

		/// <summary>
		/// converts from premultiplied alpha back to straight alpha
		/// </summary>
		SrgbIn = unchecked(16777216),

		/// <summary>
		/// converts from premultiplied alpha back to straight alpha
		/// </summary>
		SrgbOut = unchecked(33554432),

		/// <summary>
		/// converts from premultiplied alpha back to straight alpha
		/// </summary>
		Srgb = unchecked(50331648),

	}

	public enum TexCompressFlags
	{
		Default = unchecked(0),
		RgbDither = unchecked(65536),
		/// <summary>
		/// Enables dithering RGB colors for BC1-3 compression
		/// </summary>
		ADither = unchecked(131072),

		/// <summary>
		/// Enables dithering alpha for BC1-3 compression
		/// </summary>
		Dither = unchecked(196608),

		/// <summary>
		/// Enables both RGB and alpha dithering for BC1-3 compression
		/// </summary>
		Uniform = unchecked(262144),

		/// <summary>
		/// Uniform color weighting for BC1-3 compression; by default uses perceptual weighting
		/// </summary>
		Bc7Use3Subsets = unchecked(524288),

		/// <summary>
		/// Enables exhaustive search for BC7 compress for mode 0 and 2; by default skips trying these modes
		/// </summary>
		Bc7Quick = unchecked(1048576),

		/// <summary>
		/// Minimal modes (usually mode 6) for BC7 compression
		/// </summary>
		SrgbIn = unchecked(16777216),

		/// <summary>
		/// Minimal modes (usually mode 6) for BC7 compression
		/// </summary>
		SrgbOut = unchecked(33554432),

		/// <summary>
		/// Minimal modes (usually mode 6) for BC7 compression
		/// </summary>
		Srgb = unchecked(50331648),

		/// <summary>
		/// if the input format type is IsSRGB(), then SRGB_IN is on by default
		/// if the output format type is IsSRGB(), then SRGB_OUT is on by default
		/// </summary>
		Parallel = unchecked(268435456),

	}

	public enum CNMAPFlags
	{
		Default = unchecked(0),
		ChannelRed = unchecked(1),
		ChannelGreen = unchecked(2),
		ChannelBlue = unchecked(3),
		ChannelAlpha = unchecked(4),
		ChannelLuminance = unchecked(5),
		/// <summary>
		/// Channel selection when evaluting color value for height
		/// Luminance is a combination of red, green, and blue
		/// </summary>
		MirrorU = unchecked(4096),

		/// <summary>
		/// Channel selection when evaluting color value for height
		/// Luminance is a combination of red, green, and blue
		/// </summary>
		MirrorV = unchecked(8192),

		/// <summary>
		/// Channel selection when evaluting color value for height
		/// Luminance is a combination of red, green, and blue
		/// </summary>
		Mirror = unchecked(12288),

		/// <summary>
		/// Use mirror semantics for scanline references (defaults to wrap)
		/// </summary>
		InvertSign = unchecked(16384),

		/// <summary>
		/// Inverts normal sign
		/// </summary>
		ComputeOcclusion = unchecked(32768),

	}

	public enum CMSEFlags
	{
		Default = unchecked(0),
		Image1Srgb = unchecked(1),
		Image2Srgb = unchecked(2),
		/// <summary>
		/// Indicates that image needs gamma correction before comparision
		/// </summary>
		IgnoreRed = unchecked(16),

		/// <summary>
		/// Indicates that image needs gamma correction before comparision
		/// </summary>
		IgnoreGreen = unchecked(32),

		/// <summary>
		/// Indicates that image needs gamma correction before comparision
		/// </summary>
		IgnoreBlue = unchecked(64),

		/// <summary>
		/// Indicates that image needs gamma correction before comparision
		/// </summary>
		IgnoreAlpha = unchecked(128),

		/// <summary>
		/// Ignore the channel when computing MSE
		/// </summary>
		Image1X2Bias = unchecked(256),

		/// <summary>
		/// Ignore the channel when computing MSE
		/// </summary>
		Image2X2Bias = unchecked(512),

	}

	public enum WICCodecs
	{
		/// <summary>
		/// Windows Bitmap (.bmp)
		/// </summary>
		WicCodecBmp = unchecked(1),

		/// <summary>
		/// Joint Photographic Experts Group (.jpg, .jpeg)
		/// </summary>
		WicCodecJpeg = unchecked(2),

		/// <summary>
		/// Portable Network Graphics (.png)
		/// </summary>
		WicCodecPng = unchecked(3),

		/// <summary>
		/// Tagged Image File Format  (.tif, .tiff)
		/// </summary>
		WicCodecTiff = unchecked(4),

		/// <summary>
		/// Graphics Interchange Format  (.gif)
		/// </summary>
		WicCodecGif = unchecked(5),

		/// <summary>
		/// Windows Media Photo / HD Photo / JPEG XR (.hdp, .jxr, .wdp)
		/// </summary>
		WicCodecWmp = unchecked(6),

		/// <summary>
		/// Windows Icon (.ico)
		/// </summary>
		WicCodecIco = unchecked(7),

		/// <summary>
		/// High Efficiency Image File (.heif, .heic)
		/// </summary>
		WicCodecHeif = unchecked(8),

	}

	public enum CreateTexFlags
	{
		Default = unchecked(0),
		ForceSrgb = unchecked(1),
		IgnoreSrgb = unchecked(2),
	}

}
