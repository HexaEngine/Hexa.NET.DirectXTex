// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace HexaEngine.DirectXTex
{
	public static unsafe class Extensions
	{
		public static int Initialize(this ScratchImage img, TexMetadata mdata, CPFlags flags)
		{
			int ret = DirectXTex.Initialize(img, mdata, flags);
			return ret;
		}

		public static int Initialize1D(this ScratchImage img, int fmt, nuint length, nuint arraySize, nuint mipLevels, CPFlags flags)
		{
			int ret = DirectXTex.Initialize1D(img, fmt, length, arraySize, mipLevels, flags);
			return ret;
		}

		public static int Initialize2D(this ScratchImage img, int fmt, nuint width, nuint height, nuint arraySize, nuint mipLevels, CPFlags flags)
		{
			int ret = DirectXTex.Initialize2D(img, fmt, width, height, arraySize, mipLevels, flags);
			return ret;
		}

		public static int Initialize3D(this ScratchImage img, int fmt, nuint width, nuint height, nuint depth, nuint mipLevels, CPFlags flags)
		{
			int ret = DirectXTex.Initialize3D(img, fmt, width, height, depth, mipLevels, flags);
			return ret;
		}

		public static int InitializeCube(this ScratchImage img, int fmt, nuint width, nuint height, nuint nCubes, nuint mipLevels, CPFlags flags)
		{
			int ret = DirectXTex.InitializeCube(img, fmt, width, height, nCubes, mipLevels, flags);
			return ret;
		}

		public static int InitializeFromImage(this ScratchImage img, Image srcImage, bool allow1D, CPFlags flags)
		{
			int ret = DirectXTex.InitializeFromImage(img, srcImage, allow1D, flags);
			return ret;
		}

		public static int InitializeArrayFromImages(this ScratchImage img, ref Image images, nuint nImages, bool allow1D, CPFlags flags)
		{
			fixed (Image* pimages = &images)
			{
				int ret = DirectXTex.InitializeArrayFromImages(img, pimages, nImages, allow1D, flags);
				return ret;
			}
		}

		public static int InitializeArrayFromImages(this ScratchImage img, Image* images, nuint nImages, bool allow1D, CPFlags flags)
		{
			int ret = DirectXTex.InitializeArrayFromImages(img, images, nImages, allow1D, flags);
			return ret;
		}

		public static int InitializeCubeFromImages(this ScratchImage img, ref Image images, nuint nImages, CPFlags flags)
		{
			fixed (Image* pimages = &images)
			{
				int ret = DirectXTex.InitializeCubeFromImages(img, pimages, nImages, flags);
				return ret;
			}
		}

		public static int InitializeCubeFromImages(this ScratchImage img, Image* images, nuint nImages, CPFlags flags)
		{
			int ret = DirectXTex.InitializeCubeFromImages(img, images, nImages, flags);
			return ret;
		}

		public static int Initialize3DFromImages(this ScratchImage img, ref Image images, nuint depth, CPFlags flags)
		{
			fixed (Image* pimages = &images)
			{
				int ret = DirectXTex.Initialize3DFromImages(img, pimages, depth, flags);
				return ret;
			}
		}

		public static int Initialize3DFromImages(this ScratchImage img, Image* images, nuint depth, CPFlags flags)
		{
			int ret = DirectXTex.Initialize3DFromImages(img, images, depth, flags);
			return ret;
		}

		public static void Release(this ScratchImage img)
		{
			DirectXTex.ScratchImageRelease(img);
		}

		public static bool OverrideFormat(this ScratchImage img, int f)
		{
			bool ret = DirectXTex.OverrideFormat(img, f);
			return ret;
		}

		public static TexMetadata GetMetadata(this ScratchImage img)
		{
			TexMetadata ret = DirectXTex.GetMetadata(img);
			return ret;
		}

		public static Image GetImage(this ScratchImage img, nuint mip, nuint item, nuint slice)
		{
			Image ret = DirectXTex.GetImage(img, mip, item, slice);
			return ret;
		}

		public static Image* GetImages(this ScratchImage img)
		{
			Image* ret = DirectXTex.GetImages(img);
			return ret;
		}

		public static nuint GetImageCount(this ScratchImage img)
		{
			nuint ret = DirectXTex.GetImageCount(img);
			return ret;
		}

		public static byte* GetPixels(this ScratchImage img)
		{
			byte* ret = DirectXTex.GetPixels(img);
			return ret;
		}

		public static nuint GetPixelsSize(this ScratchImage img)
		{
			nuint ret = DirectXTex.GetPixelsSize(img);
			return ret;
		}

		public static bool IsAlphaAllOpaque(this ScratchImage img)
		{
			bool ret = DirectXTex.IsAlphaAllOpaque(img);
			return ret;
		}

		public static int Initialize(this Blob blob, nuint size)
		{
			int ret = DirectXTex.BlobInitialize(blob, size);
			return ret;
		}

		public static void Release(this Blob blob)
		{
			DirectXTex.BlobRelease(blob);
		}

		public static void* GetBufferPointer(this Blob blob)
		{
			void* ret = DirectXTex.BlobGetBufferPointer(blob);
			return ret;
		}

		public static nuint GetBufferSize(this Blob blob)
		{
			nuint ret = DirectXTex.BlobGetBufferSize(blob);
			return ret;
		}

		public static int Resize(this Blob blob, nuint size)
		{
			int ret = DirectXTex.BlobResize(blob, size);
			return ret;
		}

		/// <summary>
		/// Reallocate for a new size
		/// </summary>
		public static int Trim(this Blob blob, nuint size)
		{
			int ret = DirectXTex.BlobTrim(blob, size);
			return ret;
		}

	}
}
