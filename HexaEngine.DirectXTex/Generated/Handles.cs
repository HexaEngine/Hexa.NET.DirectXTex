// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;

namespace HexaEngine.DirectXTex
{
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct SetCustomProps : IEquatable<SetCustomProps>
	{
		public SetCustomProps(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static SetCustomProps Null => new SetCustomProps(0);
		public static implicit operator SetCustomProps(nint handle) => new SetCustomProps(handle);
		public static bool operator ==(SetCustomProps left, SetCustomProps right) => left.Handle == right.Handle;
		public static bool operator !=(SetCustomProps left, SetCustomProps right) => left.Handle != right.Handle;
		public static bool operator ==(SetCustomProps left, nint right) => left.Handle == right;
		public static bool operator !=(SetCustomProps left, nint right) => left.Handle != right;
		public bool Equals(SetCustomProps other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is SetCustomProps handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("SetCustomProps [0x{0}]", Handle.ToString("X"));
	}

	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct GetMQR : IEquatable<GetMQR>
	{
		public GetMQR(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static GetMQR Null => new GetMQR(0);
		public static implicit operator GetMQR(nint handle) => new GetMQR(handle);
		public static bool operator ==(GetMQR left, GetMQR right) => left.Handle == right.Handle;
		public static bool operator !=(GetMQR left, GetMQR right) => left.Handle != right.Handle;
		public static bool operator ==(GetMQR left, nint right) => left.Handle == right;
		public static bool operator !=(GetMQR left, nint right) => left.Handle != right;
		public bool Equals(GetMQR other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is GetMQR handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("GetMQR [0x{0}]", Handle.ToString("X"));
	}

	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct EvaluateImageFunc : IEquatable<EvaluateImageFunc>
	{
		public EvaluateImageFunc(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static EvaluateImageFunc Null => new EvaluateImageFunc(0);
		public static implicit operator EvaluateImageFunc(nint handle) => new EvaluateImageFunc(handle);
		public static bool operator ==(EvaluateImageFunc left, EvaluateImageFunc right) => left.Handle == right.Handle;
		public static bool operator !=(EvaluateImageFunc left, EvaluateImageFunc right) => left.Handle != right.Handle;
		public static bool operator ==(EvaluateImageFunc left, nint right) => left.Handle == right;
		public static bool operator !=(EvaluateImageFunc left, nint right) => left.Handle != right;
		public bool Equals(EvaluateImageFunc other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is EvaluateImageFunc handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("EvaluateImageFunc [0x{0}]", Handle.ToString("X"));
	}

	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct TransformImageFunc : IEquatable<TransformImageFunc>
	{
		public TransformImageFunc(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static TransformImageFunc Null => new TransformImageFunc(0);
		public static implicit operator TransformImageFunc(nint handle) => new TransformImageFunc(handle);
		public static bool operator ==(TransformImageFunc left, TransformImageFunc right) => left.Handle == right.Handle;
		public static bool operator !=(TransformImageFunc left, TransformImageFunc right) => left.Handle != right.Handle;
		public static bool operator ==(TransformImageFunc left, nint right) => left.Handle == right;
		public static bool operator !=(TransformImageFunc left, nint right) => left.Handle != right;
		public bool Equals(TransformImageFunc other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is TransformImageFunc handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("TransformImageFunc [0x{0}]", Handle.ToString("X"));
	}

	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct ScratchImage : IEquatable<ScratchImage>
	{
		public ScratchImage(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static ScratchImage Null => new ScratchImage(0);
		public static implicit operator ScratchImage(nint handle) => new ScratchImage(handle);
		public static bool operator ==(ScratchImage left, ScratchImage right) => left.Handle == right.Handle;
		public static bool operator !=(ScratchImage left, ScratchImage right) => left.Handle != right.Handle;
		public static bool operator ==(ScratchImage left, nint right) => left.Handle == right;
		public static bool operator !=(ScratchImage left, nint right) => left.Handle != right;
		public bool Equals(ScratchImage other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ScratchImage handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("ScratchImage [0x{0}]", Handle.ToString("X"));
	}

	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct Blob : IEquatable<Blob>
	{
		public Blob(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static Blob Null => new Blob(0);
		public static implicit operator Blob(nint handle) => new Blob(handle);
		public static bool operator ==(Blob left, Blob right) => left.Handle == right.Handle;
		public static bool operator !=(Blob left, Blob right) => left.Handle != right.Handle;
		public static bool operator ==(Blob left, nint right) => left.Handle == right;
		public static bool operator !=(Blob left, nint right) => left.Handle != right;
		public bool Equals(Blob other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is Blob handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("Blob [0x{0}]", Handle.ToString("X"));
	}

}
