// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;

namespace HexaEngine.DirectXTex
{
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TexMetadata
	{
		public nuint Width;
		/// <summary>
		/// Should be 1 for 1D textures
		/// </summary>
		public nuint Height;
		/// <summary>
		/// Should be 1 for 1D or 2D textures
		/// </summary>
		public nuint Depth;
		/// <summary>
		/// For cubemap, this is a multiple of 6
		/// </summary>
		public nuint ArraySize;
		public nuint MipLevels;
		public uint MiscFlags;
		public uint MiscFlags2;
		public int Format;
		public TexDimension Dimension;

		public unsafe nuint ComputeIndex(nuint mip, nuint item, nuint slice)
		{
			nuint ret = DirectXTex.ComputeIndex(this, mip, item, slice);
			return ret;
		}

		/// <summary>
		/// Returns size_t(-1) to indicate an out-of-range error
		/// </summary>
		public unsafe bool IsCubemap()
		{
			bool ret = DirectXTex.IsCubemap(this);
			return ret;
		}

		/// <summary>
		/// Helper for miscFlags
		/// </summary>
		public unsafe bool IsPMAlpha()
		{
			bool ret = DirectXTex.IsPMAlpha(this);
			return ret;
		}

		public unsafe void SetAlphaMode(TexAlphaMode mode)
		{
			fixed (TexMetadata* @this = &this)
			{
				DirectXTex.SetAlphaMode(@this, mode);
			}
		}

		public unsafe TexAlphaMode GetAlphaMode()
		{
			TexAlphaMode ret = DirectXTex.GetAlphaMode(this);
			return ret;
		}

		/// <summary>
		/// Helpers for miscFlags2
		/// </summary>
		public unsafe bool IsVolumemap()
		{
			bool ret = DirectXTex.IsVolumemap(this);
			return ret;
		}

	}

	[StructLayout(LayoutKind.Sequential)]
	public partial struct Image
	{
		public nuint Width;
		public nuint Height;
		public int Format;
		public nuint RowPitch;
		public nuint SlicePitch;
		public unsafe byte* Pixels;
	}

	[StructLayout(LayoutKind.Sequential)]
	public partial struct Rect
	{
		public nuint X;
		public nuint Y;
		public nuint W;
		public nuint H;
	}

}
